"""
Module x·ª≠ l√Ω clipboard cho text, rich text v√† ·∫£nh
"""
import pyperclip
import win32clipboard
import win32con
from PIL import Image
import io
import os
import time
import pyautogui

class ClipboardHandler:
    @staticmethod
    def copy_text(text: str):
        """Copy vƒÉn b·∫£n thu·∫ßn v√†o clipboard v·ªõi t·ªëc ƒë·ªô t·ªëi ∆∞u"""
        try:
            # Ki·ªÉm tra ƒë·ªô d√†i v√† warn n·∫øu qu√° l·ªõn
            if len(text) > 100000:
                print(f"C·∫£nh b√°o: VƒÉn b·∫£n r·∫•t d√†i ({len(text)} k√Ω t·ª±), ƒëang copy...")
            
            # S·ª≠ d·ª•ng pyperclip tr∆∞·ªõc v√¨ n√≥ nhanh h∆°n v√† √≠t conflict
            max_retries = 3
            
            for attempt in range(max_retries):
                try:
                    pyperclip.copy(text)
                    print(f"ƒê√£ copy th√†nh c√¥ng {len(text)} k√Ω t·ª± (pyperclip)")
                    return True
                except Exception as e1:
                    if attempt < max_retries - 1:
                        time.sleep(0.001)  # Micro delay r·ªìi th·ª≠ l·∫°i
                        continue
                    
                    # Fallback sang win32clipboard v·ªõi retry
                    print(f"pyperclip th·∫•t b·∫°i, th·ª≠ win32clipboard: {e1}")
                    
                    for win_attempt in range(2):
                        try:
                            win32clipboard.OpenClipboard()
                            win32clipboard.EmptyClipboard()
                            win32clipboard.SetClipboardText(text)
                            win32clipboard.CloseClipboard()
                            print(f"ƒê√£ copy th√†nh c√¥ng v·ªõi win32clipboard: {len(text)} k√Ω t·ª±")
                            return True
                        except Exception as e2:
                            try:
                                win32clipboard.CloseClipboard()
                            except:
                                pass
                            if win_attempt == 0:
                                time.sleep(0.002)  # 2ms delay r·ªìi th·ª≠ l·∫°i
                                continue
                            else:
                                print(f"L·ªói cu·ªëi c√πng: {e2}")
                                return False
            
            return False
            
        except Exception as e:
            print(f"L·ªói kh√¥ng mong ƒë·ª£i: {e}")
            return False
    
    @staticmethod
    def copy_html(html_text: str):
        """Copy vƒÉn b·∫£n (text thu·∫ßn ho·∫∑c HTML) v√†o clipboard v·ªõi t·ªëc ƒë·ªô t·ªëi ∆∞u"""
        try:
            # Ki·ªÉm tra ƒë·ªô d√†i vƒÉn b·∫£n - v·ªõi vƒÉn b·∫£n r·∫•t d√†i, d√πng copy_text tr·ª±c ti·∫øp
            if len(html_text) > 50000:  # Gi·∫£m threshold ƒë·ªÉ ∆∞u ti√™n t·ªëc ƒë·ªô
                print(f"VƒÉn b·∫£n d√†i ({len(html_text)} k√Ω t·ª±), d√πng copy_text ƒë·ªÉ tƒÉng t·ªëc")
                return ClipboardHandler.copy_text(html_text)
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i HTML kh√¥ng
            is_html = '<' in html_text and '>' in html_text
            
            if not is_html:
                # Text thu·∫ßn - escape nhanh
                html_content = (html_text
                    .replace('&', '&amp;')
                    .replace('<', '&lt;')
                    .replace('>', '&gt;')
                    .replace('\n', '<br>'))
            else:
                html_content = html_text
            
            # Template ƒë∆°n gi·∫£n h√≥a ƒë·ªÉ tƒÉng t·ªëc
            html_template = """Version:0.9
StartHTML:000000071
EndHTML:{end_html:09d}
StartFragment:000000140
EndFragment:{end_fragment:09d}
<html><head><meta charset="utf-8"></head><body><!--StartFragment-->{html_content}<!--EndFragment--></body></html>"""
            
            # T√≠nh to√°n nhanh
            end_fragment = 140 + len(html_content)
            end_html = end_fragment + 34  # 34 = len("<!--EndFragment--></body></html>")
            
            formatted_html = html_template.format(
                end_html=end_html,
                end_fragment=end_fragment,
                html_content=html_content
            )
            
            # Copy v·ªõi retry logic t·ªëi ∆∞u
            max_retries = 2  # Gi·∫£m s·ªë retry ƒë·ªÉ tƒÉng t·ªëc
            for attempt in range(max_retries):
                clipboard_opened = False
                try:
                    win32clipboard.OpenClipboard()
                    clipboard_opened = True
                    win32clipboard.EmptyClipboard()
                    
                    # Plain text nhanh
                    plain_text = (html_content
                        .replace('<br>', '\n')
                        .replace('<br/>', '\n')
                        .replace('<b>', '').replace('</b>', '')
                        .replace('<i>', '').replace('</i>', '')
                        .replace('<u>', '').replace('</u>', '')
                        .replace('<p>', '').replace('</p>', '\n')
                        .replace('&amp;', '&')
                        .replace('&lt;', '<')
                        .replace('&gt;', '>'))
                    
                    win32clipboard.SetClipboardText(plain_text.strip())
                    
                    # HTML format v·ªõi encoding an to√†n
                    html_format = win32clipboard.RegisterClipboardFormat("HTML Format")
                    try:
                        html_bytes = formatted_html.encode('utf-8')
                        win32clipboard.SetClipboardData(html_format, html_bytes)
                    except UnicodeEncodeError:
                        # Fallback: ch·ªâ copy plain text
                        pass
                    
                    win32clipboard.CloseClipboard()
                    clipboard_opened = False
                    return True
                    
                except Exception as inner_e:
                    if clipboard_opened:
                        try:
                            win32clipboard.CloseClipboard()
                        except:
                            pass
                    
                    if attempt == max_retries - 1:
                        raise inner_e
                    else:
                        time.sleep(0.001)  # Micro delay tr∆∞·ªõc retry
                        continue
                
        except Exception as e:
            print(f"L·ªói khi copy vƒÉn b·∫£n: {e}")
            # Fast fallback
            return ClipboardHandler.copy_text(html_text)
    
    @staticmethod
    def copy_image(image_path: str):
        """Copy ·∫£nh v√†o clipboard v·ªõi x·ª≠ l√Ω t·ªëc ƒë·ªô cao c·∫£i ti·∫øn"""
        try:
            # Ki·ªÉm tra file t·ªìn t·∫°i
            if not os.path.exists(image_path):
                print(f"‚ùå File ·∫£nh kh√¥ng t·ªìn t·∫°i: {image_path}")
                return False
            
            print(f"üì∏ ƒêang copy ·∫£nh: {image_path}")
            
            # M·ªü ·∫£nh v·ªõi Pillow v√† ki·ªÉm tra k√≠ch th∆∞·ªõc
            image = Image.open(image_path)
            width, height = image.size
            print(f"üìè K√≠ch th∆∞·ªõc ·∫£nh: {width}x{height}")
            
            # C·∫£nh b√°o n·∫øu ·∫£nh qu√° l·ªõn (c√≥ th·ªÉ ch·∫≠m)
            if width * height > 10000000:  # 10 megapixels
                print(f"‚ö†Ô∏è ·∫¢nh r·∫•t l·ªõn ({width}x{height}), c√≥ th·ªÉ m·∫•t th·ªùi gian...")
            
            # Convert sang RGB n·∫øu c·∫ßn
            if image.mode != 'RGB':
                image = image.convert('RGB')
                print(f"üîÑ ƒê√£ convert ·∫£nh t·ª´ {image.mode} sang RGB")
            
            # T·∫°o BMP data
            output = io.BytesIO()
            image.save(output, 'BMP')
            data = output.getvalue()[14:]  # B·ªè qua BMP file header
            output.close()
            
            # Copy v√†o clipboard v·ªõi retry logic
            max_retries = 3
            for attempt in range(max_retries):
                clipboard_opened = False
                try:
                    win32clipboard.OpenClipboard()
                    clipboard_opened = True
                    win32clipboard.EmptyClipboard()
                    win32clipboard.SetClipboardData(win32con.CF_DIB, data)
                    win32clipboard.CloseClipboard()
                    clipboard_opened = False
                    
                    print(f"‚úÖ ƒê√£ copy ·∫£nh v√†o clipboard th√†nh c√¥ng (attempt {attempt + 1})")
                    
                    # Verification: Ki·ªÉm tra xem clipboard c√≥ ch·ª©a ·∫£nh kh√¥ng - t·ªëi ∆∞u t·ªëc ƒë·ªô
                    time.sleep(0.002)  # Gi·∫£m t·ª´ 5ms xu·ªëng 2ms ƒë·ªÉ tƒÉng t·ªëc
                    if ClipboardHandler._verify_image_in_clipboard():
                        return True
                    else:
                        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ verify ·∫£nh trong clipboard, th·ª≠ l·∫°i...")
                        if attempt < max_retries - 1:
                            time.sleep(0.005)  # Gi·∫£m t·ª´ 10ms xu·ªëng 5ms delay tr∆∞·ªõc retry
                            continue
                
                except Exception as e:
                    if clipboard_opened:
                        try:
                            win32clipboard.CloseClipboard()
                        except:
                            pass
                    
                    print(f"‚ùå L·ªói khi copy ·∫£nh (attempt {attempt + 1}): {e}")
                    if attempt < max_retries - 1:
                        time.sleep(0.020)  # 20ms delay tr∆∞·ªõc retry
                        continue
                    else:
                        return False
            
            return False
            
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng mong ƒë·ª£i khi copy ·∫£nh: {e}")
            try:
                win32clipboard.CloseClipboard()
            except:
                pass
            return False
    
    @staticmethod
    def _verify_image_in_clipboard():
        """Ki·ªÉm tra xem clipboard c√≥ ch·ª©a ·∫£nh kh√¥ng"""
        try:
            win32clipboard.OpenClipboard()
            has_image = win32clipboard.IsClipboardFormatAvailable(win32con.CF_DIB)
            win32clipboard.CloseClipboard()
            return has_image
        except:
            try:
                win32clipboard.CloseClipboard()
            except:
                pass
            return False
    
    @staticmethod
    def clear_clipboard():
        """X√≥a n·ªôi dung clipboard"""
        try:
            win32clipboard.OpenClipboard()
            win32clipboard.EmptyClipboard()
            win32clipboard.CloseClipboard()
            return True
        except Exception as e:
            print(f"L·ªói khi x√≥a clipboard: {e}")
            try:
                win32clipboard.CloseClipboard()
            except:
                pass
            return False

    @staticmethod
    def paste():
        """Th·ª±c hi·ªán Ctrl+V"""
        try:
            pyautogui.hotkey('ctrl', 'v')
            return True
        except Exception as e:
            print(f"L·ªói khi paste: {e}")
            return False 