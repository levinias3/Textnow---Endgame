"""
Module qu·∫£n l√Ω shortcuts v√† x·ª≠ l√Ω logic thay th·∫ø
"""
from typing import Dict, List, Optional, Callable
from utils.config import Config
from core.clipboard_handler import ClipboardHandler
import time
import os
import threading

class ShortcutManager:
    def __init__(self, config: Config):
        self.config = config
        self.shortcuts_dict = {}
        self.update_shortcuts_dict()
        self.on_shortcut_triggered = None  # Callback khi shortcut ƒë∆∞·ª£c trigger
        self.pending_images = []  # Queue cho c√°c ·∫£nh c·∫ßn x·ª≠ l√Ω sau
        self.processing_mixed = False  # Flag ƒë·ªÉ tr√°nh conflict
    
    def update_shortcuts_dict(self):
        """C·∫≠p nh·∫≠t dictionary shortcuts t·ª´ config"""
        self.shortcuts_dict = {}
        for shortcut in self.config.get_shortcuts():
            if shortcut.get('enabled', True):
                self.shortcuts_dict[shortcut['keyword']] = shortcut
    
    def set_on_shortcut_triggered(self, callback: Callable):
        """ƒê·∫∑t callback khi shortcut ƒë∆∞·ª£c trigger"""
        self.on_shortcut_triggered = callback
    
    def get_shortcut(self, keyword: str) -> Optional[Dict]:
        """L·∫•y th√¥ng tin shortcut theo keyword"""
        return self.shortcuts_dict.get(keyword)
    
    def process_shortcut(self, keyword: str) -> bool:
        """X·ª≠ l√Ω shortcut khi ƒë∆∞·ª£c trigger v·ªõi t·ªëc ƒë·ªô t·ªëi ∆∞u v√† logging chi ti·∫øt"""
        shortcut = self.get_shortcut(keyword)
        if not shortcut:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y shortcut cho keyword: '{keyword}'")
            return False
        
        shortcut_type = shortcut.get('type', 'text')
        content = shortcut.get('content', '')
        
        print(f"üîÑ ƒêang x·ª≠ l√Ω shortcut '{keyword}' - Lo·∫°i: {shortcut_type}")
        
        success = False
        start_time = time.time()
        
        try:
            if shortcut_type in ['text', 'richtext']:
                # X·ª≠ l√Ω vƒÉn b·∫£n v·ªõi logic t·ªëi ∆∞u
                print(f"üìù X·ª≠ l√Ω vƒÉn b·∫£n cho '{keyword}' - {len(content)} k√Ω t·ª±...")
                
                content_length = len(content)
                has_html_tags = '<' in content and '>' in content
                
                # Quy·∫øt ƒë·ªãnh ph∆∞∆°ng ph√°p copy d·ª±a tr√™n n·ªôi dung
                if content_length > 20000:
                    # VƒÉn b·∫£n r·∫•t d√†i -> d√πng copy_text (nhanh nh·∫•t)
                    print(f"üìÑ VƒÉn b·∫£n d√†i ({content_length} k√Ω t·ª±) -> d√πng copy_text")
                    success = ClipboardHandler.copy_text(content)
                elif not has_html_tags:
                    # Text thu·∫ßn -> copy_text
                    print(f"üìù Text thu·∫ßn -> d√πng copy_text")
                    success = ClipboardHandler.copy_text(content)
                else:
                    # C√≥ HTML tags -> th·ª≠ copy_html tr∆∞·ªõc
                    print(f"üåê C√≥ HTML tags -> th·ª≠ copy_html")
                    success = ClipboardHandler.copy_html(content)
                    if not success:
                        print(f"‚ö†Ô∏è copy_html th·∫•t b·∫°i, fallback sang copy_text")
                        success = ClipboardHandler.copy_text(content)
                        
            elif shortcut_type == 'image':
                # X·ª≠ l√Ω ·∫£nh
                print(f"üñºÔ∏è X·ª≠ l√Ω ·∫£nh cho '{keyword}': {content}")
                
                # Ki·ªÉm tra file path tr∆∞·ªõc khi x·ª≠ l√Ω
                if not content.strip():
                    print(f"‚ùå ƒê∆∞·ªùng d·∫´n ·∫£nh tr·ªëng cho shortcut '{keyword}'")
                    success = False
                elif not os.path.exists(content):
                    print(f"‚ùå File ·∫£nh kh√¥ng t·ªìn t·∫°i: {content}")
                    success = False
                else:
                    success = ClipboardHandler.copy_image(content)
            
            elif shortcut_type == 'mixed':
                # X·ª≠ l√Ω mixed content: text + images
                print(f"üìÑüñºÔ∏è X·ª≠ l√Ω mixed content cho '{keyword}'...")
                
                if isinstance(content, dict):
                    text_content = content.get('text', '')
                    images = content.get('images', [])
                    
                    print(f"üìù Text: {len(text_content)} k√Ω t·ª±, üñºÔ∏è Images: {len(images)} ·∫£nh")
                    
                    # Clear clipboard tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu - t·ªëi ∆∞u t·ªëc ƒë·ªô
                    ClipboardHandler.clear_clipboard()
                    time.sleep(0.02)  # Gi·∫£m t·ª´ 0.05s xu·ªëng 0.02s
                    
                    success = True
                    
                    # X·ª≠ l√Ω ∆∞u ti√™n: text tr∆∞·ªõc, n·∫øu kh√¥ng c√≥ text th√¨ ·∫£nh ƒë·∫ßu ti√™n
                    if text_content:
                        # Copy text ƒë·ªÉ paste ngay
                        print(f"üîÑ Copy text ({len(text_content)} k√Ω t·ª±) ƒë·ªÉ paste tr∆∞·ªõc...")
                        text_success = ClipboardHandler.copy_text(text_content)
                        if text_success:
                            print(f"‚úÖ Text ƒë√£ s·∫µn s√†ng cho paste")
                            # Schedule x·ª≠ l√Ω t·∫•t c·∫£ ·∫£nh sau khi text ƒë∆∞·ª£c paste
                            if images:
                                print(f"üìã L√™n l·ªãch x·ª≠ l√Ω {len(images)} ·∫£nh sau khi paste text")
                                self.pending_images = images.copy()
                        else:
                            print(f"‚ùå Copy text th·∫•t b·∫°i")
                            success = False
                    elif images:
                        # Kh√¥ng c√≥ text, copy ·∫£nh ƒë·∫ßu ti√™n ƒë·ªÉ paste ngay
                        first_image = images[0]
                        print(f"üîÑ Copy ·∫£nh ƒë·∫ßu ti√™n: {first_image}")
                        
                        if not os.path.exists(first_image):
                            print(f"‚ùå ·∫¢nh ƒë·∫ßu ti√™n kh√¥ng t·ªìn t·∫°i: {first_image}")
                            success = False
                        else:
                            image_success = ClipboardHandler.copy_image(first_image)
                            if image_success:
                                print(f"‚úÖ ·∫¢nh 1 ƒë√£ s·∫µn s√†ng cho paste")
                                # Schedule x·ª≠ l√Ω c√°c ·∫£nh c√≤n l·∫°i (t·ª´ ·∫£nh 2)
                                if len(images) > 1:
                                    print(f"üìã L√™n l·ªãch x·ª≠ l√Ω {len(images)-1} ·∫£nh c√≤n l·∫°i")
                                    self.pending_images = images.copy()
                            else:
                                print(f"‚ùå Copy ·∫£nh ƒë·∫ßu ti√™n th·∫•t b·∫°i")
                                success = False
                    else:
                        print(f"‚ùå Mixed content r·ªóng")
                        success = False
                    
                    if success:
                        if text_content and images:
                            print(f"üéâ Mixed content s·∫µn s√†ng: Text (paste ngay) + {len(images)} ·∫£nh (paste sau)")
                        elif text_content:
                            print(f"üéâ Text content s·∫µn s√†ng cho paste")
                        elif images:
                            print(f"üéâ Image content s·∫µn s√†ng: ·∫¢nh 1 (paste ngay) + {len(images)-1} ·∫£nh (paste sau)")
                    
                else:
                    print(f"‚ùå Mixed content format kh√¥ng h·ª£p l·ªá cho '{keyword}'")
                    success = False
                    
            else:
                print(f"‚ùå Lo·∫°i shortcut kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {shortcut_type}")
                success = False
                
        except Exception as e:
            print(f"‚ùå Exception khi x·ª≠ l√Ω shortcut '{keyword}': {e}")
            success = False
        
        # T√≠nh th·ªùi gian x·ª≠ l√Ω
        processing_time = (time.time() - start_time) * 1000
        
        # Logging k·∫øt qu·∫£ v·ªõi th·ªùi gian
        if success:
            print(f"‚úÖ Shortcut '{keyword}' ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng trong {processing_time:.1f}ms")
            
            # G·ªçi callback n·∫øu c√≥ (kh√¥ng block)
            if self.on_shortcut_triggered:
                try:
                    if shortcut_type == 'mixed':
                        display_type = "vƒÉn b·∫£n + ·∫£nh"
                        display_content = f"Text + {len(content.get('images', []))} ·∫£nh" if isinstance(content, dict) else str(content)
                    else:
                        display_type = "vƒÉn b·∫£n" if shortcut_type in ['text', 'richtext'] else "·∫£nh"
                        display_content = content
                    self.on_shortcut_triggered(keyword, display_type, display_content)
                except Exception as callback_error:
                    print(f"‚ö†Ô∏è L·ªói trong callback: {callback_error}")
        else:
            print(f"‚ùå Shortcut '{keyword}' x·ª≠ l√Ω th·∫•t b·∫°i sau {processing_time:.1f}ms")
        
        return success
    
    def get_all_keywords(self) -> List[str]:
        """L·∫•y danh s√°ch t·∫•t c·∫£ keywords ƒëang active"""
        return list(self.shortcuts_dict.keys())
    
    def reload_shortcuts(self):
        """T·∫£i l·∫°i shortcuts t·ª´ config"""
        self.config.load()
        self.update_shortcuts_dict()
    
    def is_valid_keyword(self, keyword: str) -> bool:
        """Ki·ªÉm tra keyword c√≥ h·ª£p l·ªá kh√¥ng"""
        # Keyword ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±
        if len(keyword) < 2:
            return False
        
        # Kh√¥ng ƒë∆∞·ª£c ch·ª©a c√°c k√Ω t·ª± ƒëi·ªÅu khi·ªÉn v√† kho·∫£ng tr·∫Øng
        invalid_chars = {' ', '\t', '\n', '\r', '\b', '\f', '\v'}
        return not any(char in invalid_chars for char in keyword)
    
    def get_shortcuts_count(self) -> int:
        """ƒê·∫øm s·ªë l∆∞·ª£ng shortcuts ƒëang active"""
        return len(self.shortcuts_dict)
    
    def get_shortcuts_by_type(self, shortcut_type: str) -> List[Dict]:
        """L·∫•y danh s√°ch shortcuts theo lo·∫°i"""
        result = []
        for shortcut in self.shortcuts_dict.values():
            if shortcut_type == 'text':
                # V·ªõi "text", bao g·ªìm c·∫£ text v√† richtext
                if shortcut.get('type', 'text') in ['text', 'richtext']:
                    result.append(shortcut)
            elif shortcut_type == 'mixed':
                # Mixed content: text + images
                if shortcut.get('type', 'text') == 'mixed':
                    result.append(shortcut)
            else:
                # V·ªõi c√°c lo·∫°i kh√°c (image), so s√°nh exact
                if shortcut.get('type', 'text') == shortcut_type:
                    result.append(shortcut)
        return result
    
    def process_remaining_images(self, images: List[str], start_index: int = 1):
        """X·ª≠ l√Ω c√°c ·∫£nh c√≤n l·∫°i sau khi paste ƒë·∫ßu ti√™n ho√†n th√†nh"""
        if self.processing_mixed:
            print("‚ö†Ô∏è ƒêang x·ª≠ l√Ω mixed content kh√°c, b·ªè qua...")
            return
            
        self.processing_mixed = True
        
        def process_images_delayed():
            try:
                for i in range(start_index, len(images)):
                    image_path = images[i]
                    order = i + 1
                    
                    print(f"üîÑ X·ª≠ l√Ω ·∫£nh {order}: {image_path}")
                    
                    if not os.path.exists(image_path):
                        print(f"‚ùå ·∫¢nh {order} kh√¥ng t·ªìn t·∫°i: {image_path}")
                        continue
                    
                    # Copy ·∫£nh v·ªõi t·ªëi ∆∞u t·ªëc ƒë·ªô
                    success = ClipboardHandler.copy_image(image_path)
                    if success:
                        print(f"‚úÖ ·∫¢nh {order} ƒë√£ copy th√†nh c√¥ng")
                        # Paste ·∫£nh ngay l·∫≠p t·ª©c
                        ClipboardHandler.paste()
                        print(f"üìã ·∫¢nh {order} ƒë√£ paste")
                        
                        # Delay t·ªëi thi·ªÉu ch·ªâ ƒë·ªÉ ƒë·∫£m b·∫£o paste ho√†n th√†nh
                        if i < len(images) - 1:  # Kh√¥ng delay cho ·∫£nh cu·ªëi
                            time.sleep(0.05)  # T·ªëi ∆∞u: gi·∫£m t·ª´ 0.08s xu·ªëng 0.05s
                    else:
                        print(f"‚ùå Copy ·∫£nh {order} th·∫•t b·∫°i")
                        
                print(f"üéâ Ho√†n th√†nh x·ª≠ l√Ω {len(images)} ·∫£nh")
            except Exception as e:
                print(f"‚ùå L·ªói khi x·ª≠ l√Ω ·∫£nh: {e}")
            finally:
                self.processing_mixed = False
        
        # Delay t·ªëi thi·ªÉu tr∆∞·ªõc khi x·ª≠ l√Ω ·∫£nh ti·∫øp theo
        timer = threading.Timer(0.08, process_images_delayed)  # Gi·∫£m t·ª´ 0.15s xu·ªëng 0.08s
        timer.start() 