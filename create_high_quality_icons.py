#!/usr/bin/env python3
"""
Script t·∫°o icon ch·∫•t l∆∞·ª£ng cao cho ph·∫ßn m·ªÅm t·ª´ ·∫£nh g·ªëc
"""
import sys
import os
from pathlib import Path
from PIL import Image, ImageEnhance
import shutil

def create_high_quality_icons():
    """T·∫°o c√°c icon ch·∫•t l∆∞·ª£ng cao t·ª´ ·∫£nh g·ªëc"""
    
    # ƒê∆∞·ªùng d·∫´n ·∫£nh g·ªëc
    source_image = Path("C:/Users/Admin/Downloads/image 488.png")
    
    if not source_image.exists():
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh g·ªëc: {source_image}")
        return False
    
    print(f"üì± ƒêang t·∫°o icon t·ª´ ·∫£nh g·ªëc: {source_image}")
    
    try:
        # M·ªü ·∫£nh g·ªëc
        original_img = Image.open(source_image)
        print(f"üñºÔ∏è K√≠ch th∆∞·ªõc ·∫£nh g·ªëc: {original_img.size}")
        
        # Convert sang RGBA ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh t∆∞∆°ng th√≠ch
        if original_img.mode != 'RGBA':
            original_img = original_img.convert('RGBA')
        
        # Enhance ch·∫•t l∆∞·ª£ng
        enhancer = ImageEnhance.Sharpness(original_img)
        original_img = enhancer.enhance(1.2)  # TƒÉng ƒë·ªô s·∫Øc n√©t
        
        # T·∫°o th∆∞ m·ª•c icons n·∫øu ch∆∞a c√≥
        icons_dir = Path("icons")
        icons_dir.mkdir(exist_ok=True)
        
        # C√°c k√≠ch th∆∞·ªõc icon c·∫ßn t·∫°o (quan tr·ªçng cho Windows)
        icon_sizes = [
            16,   # Taskbar small
            20,   # System tray
            24,   # Small toolbar
            32,   # Standard icon
            40,   # Medium icon  
            48,   # Large icon
            64,   # Extra large
            96,   # Jumbo icon
            128,  # Very large
            256,  # Ultra large
            512   # Maximum quality
        ]
        
        created_files = []
        
        for size in icon_sizes:
            # Resize v·ªõi ch·∫•t l∆∞·ª£ng cao nh·∫•t
            resized_img = original_img.resize(
                (size, size), 
                Image.Resampling.LANCZOS  # Ch·∫•t l∆∞·ª£ng cao nh·∫•t
            )
            
            # L∆∞u v√†o th∆∞ m·ª•c icons
            icon_path = icons_dir / f"icon_{size}x{size}.png"
            resized_img.save(icon_path, 'PNG', optimize=True, quality=100)
            created_files.append(icon_path)
            print(f"‚úÖ T·∫°o icon {size}x{size}: {icon_path}")
        
        # T·∫°o icon.png ch√≠nh (256x256 cho ch·∫•t l∆∞·ª£ng cao)
        main_icon = original_img.resize((256, 256), Image.Resampling.LANCZOS)
        main_icon_path = Path("icon.png")
        main_icon.save(main_icon_path, 'PNG', optimize=True, quality=100)
        created_files.append(main_icon_path)
        print(f"‚úÖ T·∫°o icon ch√≠nh: {main_icon_path}")
        
        # T·∫°o app.ico cho Windows (multi-size ICO)
        ico_sizes = [(16, 16), (32, 32), (48, 48), (64, 64), (128, 128), (256, 256)]
        ico_images = []
        
        for size_tuple in ico_sizes:
            ico_img = original_img.resize(size_tuple, Image.Resampling.LANCZOS)
            ico_images.append(ico_img)
        
        # L∆∞u file .ico
        ico_path = Path("app.ico")
        ico_images[0].save(
            ico_path, 
            format='ICO', 
            sizes=ico_sizes,
            append_images=ico_images[1:]
        )
        created_files.append(ico_path)
        print(f"‚úÖ T·∫°o file ICO: {ico_path}")
        
        # T·∫°o c√°c logo trong th∆∞ m·ª•c logos
        logos_dir = Path("logos")
        logos_dir.mkdir(exist_ok=True)
        
        logo_sizes = [64, 128, 256, 512]
        for size in logo_sizes:
            logo_img = original_img.resize((size, size), Image.Resampling.LANCZOS)
            logo_path = logos_dir / f"logo_{size}x{size}.png"
            logo_img.save(logo_path, 'PNG', optimize=True, quality=100)
            created_files.append(logo_path)
            print(f"‚úÖ T·∫°o logo {size}x{size}: {logo_path}")
        
        # T·∫°o logo.png ch√≠nh
        main_logo = original_img.resize((512, 512), Image.Resampling.LANCZOS)
        main_logo_path = logos_dir / "logo.png"
        main_logo.save(main_logo_path, 'PNG', optimize=True, quality=100)
        created_files.append(main_logo_path)
        print(f"‚úÖ T·∫°o logo ch√≠nh: {main_logo_path}")
        
        print(f"\nüéâ T·∫°o th√†nh c√¥ng {len(created_files)} file icon & logo!")
        print("üìã Danh s√°ch file ƒë√£ t·∫°o:")
        for file in created_files:
            file_size = file.stat().st_size / 1024  # KB
            print(f"  ‚Ä¢ {file} ({file_size:.1f} KB)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o icon: {e}")
        return False

def update_icon_references():
    """C·∫≠p nh·∫≠t c√°c tham chi·∫øu icon trong m√£ ƒë·ªÉ s·ª≠ d·ª•ng icon ch·∫•t l∆∞·ª£ng cao"""
    
    print("\nüîß C·∫≠p nh·∫≠t tham chi·∫øu icon trong m√£...")
    
    # C·∫≠p nh·∫≠t main_window_qt.py ƒë·ªÉ s·ª≠ d·ª•ng icon ch·∫•t l∆∞·ª£ng cao
    qt_main_file = Path("qt_ui/main_window_qt.py")
    if qt_main_file.exists():
        try:
            content = qt_main_file.read_text(encoding='utf-8')
            
            # T√¨m v√† thay th·∫ø ƒëo·∫°n _set_window_icon
            old_method = '''def _set_window_icon(self):
        """Set window icon"""
        try:
            icon_path = Path(__file__).parent.parent / "icon.png"
            if icon_path.exists():
                self.setWindowIcon(QIcon(str(icon_path)))
        except Exception as e:
            print(f"‚ö†Ô∏è Icon error: {e}")'''
            
            new_method = '''def _set_window_icon(self):
        """Set window icon v·ªõi ch·∫•t l∆∞·ª£ng cao"""
        try:
            # S·ª≠ d·ª•ng icon ch·∫•t l∆∞·ª£ng cao nh·∫•t c√≥ s·∫µn
            base_path = Path(__file__).parent.parent
            
            # Th·ª≠ c√°c icon theo th·ª© t·ª± ∆∞u ti√™n (ch·∫•t l∆∞·ª£ng cao -> th·∫•p)
            icon_candidates = [
                base_path / "icons" / "icon_256x256.png",  # Ch·∫•t l∆∞·ª£ng cao nh·∫•t
                base_path / "icons" / "icon_128x128.png",  # Ch·∫•t l∆∞·ª£ng cao
                base_path / "icons" / "icon_64x64.png",    # Ch·∫•t l∆∞·ª£ng trung b√¨nh
                base_path / "icon.png",                    # Fallback
                base_path / "app.ico"                      # ICO fallback
            ]
            
            for icon_path in icon_candidates:
                if icon_path.exists():
                    self.setWindowIcon(QIcon(str(icon_path)))
                    print(f"‚úÖ Window icon set: {icon_path.name}")
                    return
                    
            print("‚ö†Ô∏è No window icon found")
        except Exception as e:
            print(f"‚ö†Ô∏è Window icon error: {e}")'''
            
            if old_method in content:
                content = content.replace(old_method, new_method)
                print("‚úÖ C·∫≠p nh·∫≠t _set_window_icon() method")
            
            # T√¨m v√† thay th·∫ø ƒëo·∫°n system tray icon
            old_tray = '''# Set icon
            icon_path = Path(__file__).parent.parent / "icon.png"
            if icon_path.exists():
                self.tray_icon.setIcon(QIcon(str(icon_path)))
                print(f"‚úÖ Tray icon set: {icon_path}")
            else:
                # Fallback to default icon
                self.tray_icon.setIcon(self.style().standardIcon(self.style().StandardPixmap.SP_ComputerIcon))
                print("‚úÖ Tray icon set: default")'''
            
            new_tray = '''# Set icon v·ªõi ch·∫•t l∆∞·ª£ng cao
            base_path = Path(__file__).parent.parent
            tray_icon_candidates = [
                base_path / "icons" / "icon_32x32.png",    # T·ªëi ∆∞u cho system tray
                base_path / "icons" / "icon_20x20.png",    # K√≠ch th∆∞·ªõc chu·∫©n tray
                base_path / "icons" / "icon_24x24.png",    # Alternative tray size
                base_path / "icon.png",                    # Fallback
                base_path / "app.ico"                      # ICO fallback
            ]
            
            tray_icon_set = False
            for icon_path in tray_icon_candidates:
                if icon_path.exists():
                    self.tray_icon.setIcon(QIcon(str(icon_path)))
                    print(f"‚úÖ Tray icon set: {icon_path.name}")
                    tray_icon_set = True
                    break
            
            if not tray_icon_set:
                # Fallback to default icon
                self.tray_icon.setIcon(self.style().standardIcon(self.style().StandardPixmap.SP_ComputerIcon))
                print("‚úÖ Tray icon set: default fallback")'''
            
            if old_tray in content:
                content = content.replace(old_tray, new_tray)
                print("‚úÖ C·∫≠p nh·∫≠t system tray icon")
            
            # L∆∞u file
            qt_main_file.write_text(content, encoding='utf-8')
            print(f"‚úÖ C·∫≠p nh·∫≠t file: {qt_main_file}")
            
        except Exception as e:
            print(f"‚ùå L·ªói c·∫≠p nh·∫≠t {qt_main_file}: {e}")
    
    # C·∫≠p nh·∫≠t main_qt.py
    main_qt_file = Path("main_qt.py")
    if main_qt_file.exists():
        try:
            content = main_qt_file.read_text(encoding='utf-8')
            
            # C·∫≠p nh·∫≠t icon paths ƒë·ªÉ ∆∞u ti√™n icon ch·∫•t l∆∞·ª£ng cao
            old_icon = 'icon_path = get_resource_path("icon.png")'
            new_icon = '''# S·ª≠ d·ª•ng icon ch·∫•t l∆∞·ª£ng cao nh·∫•t c√≥ s·∫µn
        high_quality_icons = [
            "icons/icon_256x256.png",
            "icons/icon_128x128.png", 
            "icons/icon_64x64.png",
            "icon.png",
            "app.ico"
        ]
        
        icon_path = None
        for icon_file in high_quality_icons:
            candidate_path = get_resource_path(icon_file)
            if candidate_path and os.path.exists(candidate_path):
                icon_path = candidate_path
                break
        
        if not icon_path:
            icon_path = get_resource_path("icon.png")'''
            
            if old_icon in content:
                content = content.replace(old_icon, new_icon)
                print("‚úÖ C·∫≠p nh·∫≠t main_qt.py icon handling")
                
                main_qt_file.write_text(content, encoding='utf-8')
                print(f"‚úÖ C·∫≠p nh·∫≠t file: {main_qt_file}")
            
        except Exception as e:
            print(f"‚ùå L·ªói c·∫≠p nh·∫≠t {main_qt_file}: {e}")

def main():
    """Main function"""
    print("üöÄ B·∫Øt ƒë·∫ßu t·∫°o icon ch·∫•t l∆∞·ª£ng cao cho TextNow...")
    
    # Ki·ªÉm tra Pillow
    try:
        from PIL import Image, ImageEnhance
    except ImportError:
        print("üì¶ C√†i ƒë·∫∑t Pillow...")
        import subprocess
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'Pillow'])
        from PIL import Image, ImageEnhance
        
    # T·∫°o icon
    if create_high_quality_icons():
        print("\n‚úÖ T·∫°o icon th√†nh c√¥ng!")
        
        # C·∫≠p nh·∫≠t m√£
        update_icon_references()
        
        print("\nüéØ Ho√†n t·∫•t! C√°c c·∫£i ti·∫øn:")
        print("  ‚Ä¢ Icon taskbar & system tray ch·∫•t l∆∞·ª£ng cao")
        print("  ‚Ä¢ H·ªó tr·ª£ nhi·ªÅu k√≠ch th∆∞·ªõc (16x16 -> 512x512)")
        print("  ‚Ä¢ File .ico multi-size cho Windows")
        print("  ‚Ä¢ Logo ch·∫•t l∆∞·ª£ng cao cho UI")
        print("  ‚Ä¢ T·ªëi ∆∞u cho vi·ªác build exe")
        
        print("\nüìÅ Ki·ªÉm tra c√°c file ƒë√£ t·∫°o:")
        print("  ‚Ä¢ icons/ - C√°c icon k√≠ch th∆∞·ªõc kh√°c nhau")
        print("  ‚Ä¢ logos/ - C√°c logo k√≠ch th∆∞·ªõc kh√°c nhau") 
        print("  ‚Ä¢ icon.png - Icon ch√≠nh 256x256")
        print("  ‚Ä¢ app.ico - Icon Windows multi-size")
        
    else:
        print("‚ùå T·∫°o icon th·∫•t b·∫°i!")

if __name__ == "__main__":
    main() 