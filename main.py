"""
Auto Text & Image - ·ª®ng d·ª•ng g√µ t·∫Øt th√¥ng minh cho Windows
Main entry point
"""
import sys
import os
from ui.main_window import MainWindow
from system_tray import SystemTray
from utils.single_instance import ensure_single_instance

class AutoTextImageApp:
    def __init__(self):
        self.main_window = MainWindow()
        self.system_tray = SystemTray()
        self.single_instance = None
        
        # K·∫øt n·ªëi c√°c callback
        self.main_window.set_on_minimize_to_tray(self._on_minimize_to_tray)
        self.system_tray.set_callbacks(
            on_show_window=self._on_show_window,
            on_exit=self._on_exit
        )
        
        # Callback ƒë·ªÉ c·∫≠p nh·∫≠t icon tray khi tr·∫°ng th√°i monitoring thay ƒë·ªïi
        original_callback = self.main_window.keyboard_monitor.on_status_changed
        def new_callback(is_active):
            if original_callback:
                original_callback(is_active)
            self.system_tray.update_icon(is_active)
        self.main_window.keyboard_monitor.set_on_status_changed(new_callback)
        
    def set_single_instance(self, single_instance):
        """ƒê·∫∑t single instance object"""
        self.single_instance = single_instance
        
    def _on_minimize_to_tray(self):
        """X·ª≠ l√Ω khi minimize to tray"""
        self.system_tray.show_notification(
            "Auto Text & Image",
            "·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c thu nh·ªè xu·ªëng khay h·ªá th·ªëng"
        )
    
    def _on_show_window(self):
        """X·ª≠ l√Ω khi click m·ªü c·ª≠a s·ªï t·ª´ tray"""
        self.main_window.show()
    
    def _on_exit(self):
        """X·ª≠ l√Ω khi click tho√°t t·ª´ tray"""
        try:
            self.main_window.stop()
            self.system_tray.stop()
            
            # Gi·∫£i ph√≥ng single instance lock
            if self.single_instance:
                self.single_instance.release_lock()
                
            self.main_window.root.quit()
            self.main_window.root.destroy()
        except:
            pass
        finally:
            os._exit(0)  # Force exit ƒë·ªÉ tr√°nh SystemExit exception
    
    def check_signals_periodically(self):
        """Ki·ªÉm tra signals t·ª´ instance kh√°c ƒë·ªãnh k·ª≥"""
        if self.single_instance and self.single_instance.check_for_show_signal():
            # C√≥ signal t·ª´ instance kh√°c, hi·ªán c·ª≠a s·ªï
            self.main_window.show()
            
        # L√™n l·ªãch ki·ªÉm tra l·∫°i sau 500ms
        self.main_window.root.after(500, self.check_signals_periodically)
    
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        # Kh·ªüi ƒë·ªông system tray
        self.system_tray.start()
        
        # B·∫Øt ƒë·∫ßu ki·ªÉm tra signals
        if self.single_instance:
            self.check_signals_periodically()
        
        # Kh·ªüi ƒë·ªông main window
        self.main_window.start()

def main():
    """Entry point"""
    try:
        # Ki·ªÉm tra single instance tr∆∞·ªõc
        single_instance = ensure_single_instance("AutoTextImage")
        if not single_instance:
            print("‚ö†Ô∏è ·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c ch·∫°y. Hi·ªán c·ª≠a s·ªï c·ªßa phi√™n b·∫£n ƒëang ch·∫°y...")
            sys.exit(0)
            
        print("üîí Single instance lock acquired successfully")
        
        # Ki·ªÉm tra quy·ªÅn administrator (khuy·∫øn ngh·ªã cho keyboard hook)
        import ctypes
        if not ctypes.windll.shell32.IsUserAnAdmin():
            print("C·∫£nh b√°o: ·ª®ng d·ª•ng ho·∫°t ƒë·ªông t·ªët nh·∫•t khi ch·∫°y v·ªõi quy·ªÅn Administrator")
            print("M·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ b·ªã gi·ªõi h·∫°n trong m·ªôt s·ªë ·ª©ng d·ª•ng")
        
        # Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng
        app = AutoTextImageApp()
        app.set_single_instance(single_instance)
        
        try:
            app.run()
        finally:
            # ƒê·∫£m b·∫£o gi·∫£i ph√≥ng lock khi tho√°t
            single_instance.release_lock()
        
    except KeyboardInterrupt:
        print("\n·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"L·ªói khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng: {e}")
        import traceback
        traceback.print_exc()
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")

if __name__ == "__main__":
    main() 