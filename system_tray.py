"""
Module x·ª≠ l√Ω System Tray cho ·ª©ng d·ª•ng
"""
import pystray
from PIL import Image, ImageDraw
import threading
from typing import Callable, Optional
import os

class SystemTray:
    def __init__(self):
        self.app_name = "Auto Text & Image - Fullscreen"
        self.icon = None
        self.thread = None
        self.on_show_window = None
        self.on_exit = None
    
    def set_callbacks(self, on_show_window: Callable = None, on_exit: Callable = None):
        """ƒê·∫∑t c√°c callback functions"""
        self.on_show_window = on_show_window
        self.on_exit = on_exit
    
    def create_icon(self, is_monitoring: bool = True) -> Image.Image:
        """T·∫°o icon cho system tray t·ª´ file ·∫£nh"""
        try:
            # ƒê∆∞·ªùng d·∫´n ƒë·∫øn file icon trong th∆∞ m·ª•c d·ª± √°n
            icon_path = "icon.png"
            
            # Ki·ªÉm tra file t·ªìn t·∫°i
            if os.path.exists(icon_path):
                # Load ·∫£nh t·ª´ file
                image = Image.open(icon_path)
                
                # Resize v·ªÅ 64x64 cho system tray
                image = image.resize((64, 64), Image.Resampling.LANCZOS)
                
                # Convert sang RGBA ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
                if image.mode != 'RGBA':
                    image = image.convert('RGBA')
                
                # N·∫øu kh√¥ng monitoring, l√†m m·ªù icon m·ªôt ch√∫t
                if not is_monitoring:
                    # T·∫°o overlay m·ªù
                    overlay = Image.new('RGBA', (64, 64), (128, 128, 128, 128))
                    image = Image.alpha_composite(image, overlay)
                
                return image
            else:
                print(f"Kh√¥ng t√¨m th·∫•y file icon: {icon_path}")
                # Fallback v·ªÅ icon m·∫∑c ƒë·ªãnh
                return self._create_default_icon(is_monitoring)
                
        except Exception as e:
            print(f"L·ªói khi load icon: {e}")
            # Fallback v·ªÅ icon m·∫∑c ƒë·ªãnh
            return self._create_default_icon(is_monitoring)
    
    def _create_default_icon(self, is_monitoring: bool = True) -> Image.Image:
        """T·∫°o icon m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng load ƒë∆∞·ª£c file ·∫£nh"""
        # T·∫°o icon 64x64
        image = Image.new('RGB', (64, 64), color='white')
        draw = ImageDraw.Draw(image)
        
        # V·∫Ω icon ƒë∆°n gi·∫£n (c√≥ th·ªÉ thay b·∫±ng icon file sau)
        if is_monitoring:
            # Icon m√†u xanh khi ƒëang ho·∫°t ƒë·ªông
            draw.rectangle([16, 16, 48, 48], fill='green', outline='darkgreen', width=2)
            draw.text((26, 26), "A", fill='white')
        else:
            # Icon m√†u ƒë·ªè khi t·∫°m d·ª´ng
            draw.rectangle([16, 16, 48, 48], fill='red', outline='darkred', width=2)
            draw.text((26, 26), "A", fill='white')
        
        return image
    
    def update_icon(self, is_monitoring: bool):
        """C·∫≠p nh·∫≠t icon theo tr·∫°ng th√°i monitoring"""
        if self.icon:
            self.icon.icon = self.create_icon(is_monitoring)
    
    def _create_menu(self):
        """T·∫°o context menu cho system tray"""
        return pystray.Menu(
            pystray.MenuItem("üì∫ Hi·ªÉn th·ªã (To√†n m√†n h√¨nh)", self._on_show_window, default=True),
            pystray.MenuItem("‚ÑπÔ∏è Th√¥ng tin", self._show_info),
            pystray.MenuItem("üö™ Tho√°t", self._on_exit)
        )
    
    def _on_show_window(self, icon, item):
        """X·ª≠ l√Ω khi click M·ªü c·ª≠a s·ªï"""
        if self.on_show_window:
            self.on_show_window()
    
    def _on_exit(self, icon, item):
        """X·ª≠ l√Ω khi click Tho√°t"""
        if self.on_exit:
            self.on_exit()
        self.stop()
    
    def _show_info(self, icon, item):
        """Hi·ªÉn th·ªã th√¥ng tin v·ªÅ ch·∫ø ƒë·ªô fullscreen"""
        self.show_notification(
            "üì∫ Ch·∫ø ƒë·ªô To√†n m√†n h√¨nh", 
            "·ª®ng d·ª•ng ch·∫°y fullscreen\nKh√¥ng th·ªÉ minimize\nCtrl+Alt+Q ƒë·ªÉ tho√°t kh·∫©n c·∫•p"
        )
    
    def start(self):
        """B·∫Øt ƒë·∫ßu system tray trong thread ri√™ng"""
        def run():
            self.icon = pystray.Icon(
                self.app_name,
                self.create_icon(True),
                self.app_name,
                menu=self._create_menu()
            )
            self.icon.run()
        
        self.thread = threading.Thread(target=run, daemon=True)
        self.thread.start()
    
    def stop(self):
        """D·ª´ng system tray"""
        if self.icon:
            self.icon.stop()
    
    def show_notification(self, title: str, message: str):
        """Hi·ªÉn th·ªã notification t·ª´ system tray"""
        if self.icon:
            try:
                self.icon.notify(message, title)
                print(f"üì¢ Notification: {title} - {message}")
            except Exception as e:
                # M·ªôt s·ªë h·ªá th·ªëng kh√¥ng h·ªó tr·ª£ notification
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ hi·ªán notification: {e}")
                pass 