#!/usr/bin/env python3
"""
Test script ƒë·ªÉ ki·ªÉm tra hi·ªÉn th·ªã checkmark trong radio buttons v√† checkbox
"""
import sys
import os
from pathlib import Path
from PySide6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QRadioButton, QCheckBox, QPushButton
from PySide6.QtCore import Qt
from PySide6.QtGui import QIcon

def test_checkmark_display():
    """Test hi·ªÉn th·ªã checkmark v·ªõi ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi"""
    
    app = QApplication(sys.argv)
    
    # Get absolute paths
    project_root = Path(__file__).parent
    checkmark_path = project_root / "checkmark.png"
    checkmark_vector_path = project_root / "checkmark_vector.png"
    
    print(f"üß™ Testing checkmark display:")
    print(f"  Project root: {project_root}")
    print(f"  Checkmark radio: {checkmark_path} {'‚úÖ' if checkmark_path.exists() else '‚ùå'}")
    print(f"  Checkmark checkbox: {checkmark_vector_path} {'‚úÖ' if checkmark_vector_path.exists() else '‚ùå'}")
    
    # Convert to simple absolute paths for CSS
    checkmark_path_str = str(checkmark_path).replace('\\', '/') if checkmark_path.exists() else ""
    checkmark_vector_path_str = str(checkmark_vector_path).replace('\\', '/') if checkmark_vector_path.exists() else ""
    
    print(f"  Radio path: {checkmark_path_str}")
    print(f"  Checkbox path: {checkmark_vector_path_str}")
    
    # Create main window
    window = QMainWindow()
    window.setWindowTitle("Checkmark Display Test")
    window.setFixedSize(400, 300)
    
    # Central widget
    central_widget = QWidget()
    window.setCentralWidget(central_widget)
    layout = QVBoxLayout(central_widget)
    
    # Radio buttons v·ªõi checkmark
    if checkmark_path_str:
        radio_style = f"""
        QRadioButton {{
          font-size: 16px;
          font-weight: 500;
          color: #374151;
          spacing: 12px;
          padding: 8px 16px;
          min-height: 40px;
        }}
        QRadioButton::indicator {{
          width: 20px;
          height: 20px;
          border-radius: 4px;
          border: 2px solid #D1D5DB;
          background-color: #FFFFFF;
        }}
        QRadioButton::indicator:checked {{
          background-color: #3B82F6;
          border-color: #3B82F6;
          image: url("{checkmark_path_str}");
        }}
        QRadioButton::indicator:hover {{
          border-color: #9CA3AF;
        }}
        QRadioButton:checked {{
          color: #3B82F6;
          font-weight: 600;
        }}
        """
        
        radio1 = QRadioButton("Radio 1 (VƒÉn b·∫£n)")
        radio1.setStyleSheet(radio_style)
        radio1.setChecked(True)
        layout.addWidget(radio1)
        
        radio2 = QRadioButton("Radio 2 (H√¨nh ·∫£nh)")
        radio2.setStyleSheet(radio_style)
        layout.addWidget(radio2)
        
        radio3 = QRadioButton("Radio 3 (VƒÉn b·∫£n + ·∫¢nh)")
        radio3.setStyleSheet(radio_style)
        layout.addWidget(radio3)
    
    # Checkbox v·ªõi checkmark_vector
    if checkmark_vector_path_str:
        checkbox_style = f"""
        QCheckBox {{
          font-size: 16px;
          font-weight: 500;
          color: #374151;
          spacing: 12px;
          padding: 8px 16px;
          min-height: 40px;
        }}
        QCheckBox::indicator {{
          width: 20px;
          height: 20px;
          border-radius: 4px;
          border: 2px solid #D1D5DB;
          background-color: #FFFFFF;
        }}
        QCheckBox::indicator:checked {{
          background-color: #3B82F6;
          border-color: #3B82F6;
          image: url("{checkmark_vector_path_str}");
        }}
        QCheckBox::indicator:hover {{
          border-color: #9CA3AF;
        }}
        QCheckBox:checked {{
          color: #3B82F6;
          font-weight: 600;
        }}
        """
        
        checkbox = QCheckBox("K√≠ch ho·∫°t shortcut")
        checkbox.setStyleSheet(checkbox_style)
        checkbox.setChecked(True)
        layout.addWidget(checkbox)
    
    # Exit button
    exit_btn = QPushButton("ƒê√≥ng Test")
    exit_btn.clicked.connect(app.quit)
    layout.addWidget(exit_btn)
    
    # Show window
    window.show()
    
    print("\n‚úÖ Test window opened - Check if checkmarks are visible!")
    print("  ‚Ä¢ Radio buttons should show checkmark when selected")
    print("  ‚Ä¢ Checkbox should show checkmark when checked")
    print("  ‚Ä¢ Both should have blue background when active")
    
    return app.exec()

if __name__ == "__main__":
    sys.exit(test_checkmark_display()) 