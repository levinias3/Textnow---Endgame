"""
Giao di·ªán ch√≠nh c·ªßa ·ª©ng d·ª•ng Auto Text & Image - Modern UI with SVN Poppins Font & Modern Icons
"""
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
from typing import Optional
from utils.config import Config
from utils.startup import is_autostart_enabled, toggle_autostart
from utils.font_manager import get_font_manager, get_font_family
from utils.icon_manager import ModernIcons, ModernColors, TypographyScale
from core.shortcut_manager import ShortcutManager
from core.keyboard_monitor import KeyboardMonitor

class ModernStyle:
    """ƒê·ªãnh nghƒ©a theme hi·ªán ƒë·∫°i cho ·ª©ng d·ª•ng v·ªõi font SVN Poppins v√† icons"""
    
    # Color Palette - Updated with ModernColors
    PRIMARY = ModernColors.PRIMARY
    PRIMARY_LIGHT = ModernColors.PRIMARY_LIGHT  
    PRIMARY_DARK = ModernColors.PRIMARY_DARK
    
    SECONDARY = ModernColors.SUCCESS
    SECONDARY_LIGHT = ModernColors.SUCCESS_LIGHT
    
    ACCENT = ModernColors.WARNING
    DANGER = ModernColors.DANGER
    
    # Neutral colors - Using ModernColors
    WHITE = ModernColors.BACKGROUND
    GRAY_50 = ModernColors.SURFACE
    GRAY_100 = "#f3f4f6"
    GRAY_200 = ModernColors.BORDER
    GRAY_300 = "#d1d5db"
    GRAY_400 = ModernColors.TEXT_MUTED
    GRAY_500 = ModernColors.TEXT_SECONDARY
    GRAY_600 = "#4b5563"
    GRAY_700 = "#374151"
    GRAY_800 = ModernColors.TEXT_PRIMARY
    GRAY_900 = "#111827"
    
    # Typography with SVN Poppins - Using TypographyScale
    FONT_FAMILY = get_font_family()
    
    # Font sizes from TypographyScale
    FONT_SIZE_DISPLAY = TypographyScale.DISPLAY
    FONT_SIZE_H1 = TypographyScale.H1
    FONT_SIZE_H2 = TypographyScale.H2
    FONT_SIZE_H3 = TypographyScale.H3
    FONT_SIZE_LARGE = TypographyScale.BODY_LARGE
    FONT_SIZE_NORMAL = TypographyScale.BODY
    FONT_SIZE_SMALL = TypographyScale.CAPTION
    FONT_SIZE_MICRO = TypographyScale.MICRO
    
    # Spacing
    SPACE_XS = 4
    SPACE_SM = 8
    SPACE_MD = 12
    SPACE_LG = 16
    SPACE_XL = 24
    SPACE_2XL = 32
    
    @staticmethod
    def get_font(size=12, weight='regular', italic=False):
        """L·∫•y font SVN Poppins v·ªõi weight v√† size ch·ªâ ƒë·ªãnh"""
        return get_font_manager().get_font(size, weight, italic)

    @staticmethod
    def get_heading_font(level=1):
        """L·∫•y font cho heading theo level"""
        size, weight = TypographyScale.get_heading_style(level)
        return ModernStyle.get_font(size, weight)

class MainWindow:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Auto Text & Image - SVN Poppins")
        
        # ‚ú® Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc c·ª≠a s·ªï 1440x1080
        window_width = 1440
        window_height = 1080
        
        # T√≠nh to√°n v·ªã tr√≠ ƒë·ªÉ c·ª≠a s·ªï hi·ªÉn th·ªã ·ªü gi·ªØa m√†n h√¨nh
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        # Thi·∫øt l·∫≠p geometry cho c·ª≠a s·ªï
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        self.root.resizable(True, True)  # Cho ph√©p resize
        
        # Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu
        self.root.minsize(1200, 800)
        
        # NgƒÉn kh√¥ng cho minimize b·∫±ng c√°ch x·ª≠ l√Ω window state event
        # self.root.bind('<Unmap>', self._on_window_state_change)  # T·∫°m th·ªùi disable ƒë·ªÉ tr√°nh loop
        
        # S·ª≠ d·ª•ng c√°ch kh√°c: override window manager protocol
        self.root.protocol("WM_WINDOW_DELETE", self._on_closing)
        
        # Thi·∫øt l·∫≠p window attributes
        try:
            # Tr√™n Windows: Enable window controls
            import tkinter.messagebox
            self.root.attributes('-disabled', 0)  # Enable window
            # self.root.attributes('-topmost', True)  # Always on top (optional)
        except:
            pass
        
        # Th√™m hotkey tho√°t kh·∫©n c·∫•p (Ctrl+Alt+Q)
        self.root.bind('<Control-Alt-q>', self._emergency_exit)
        self.root.bind('<Control-Alt-Q>', self._emergency_exit)
        
        # Initialize font manager first
        self.font_manager = get_font_manager()
        print(f"üî§ Font hi·ªán t·∫°i: {self.font_manager.get_font_family()}")
        print(f"‚ú® Font SVN Poppins loaded: {self.font_manager.is_loaded()}")
        print(f"üì∫ K√≠ch th∆∞·ªõc c·ª≠a s·ªï: {window_width}x{window_height}")
        
        # Configure modern style
        self._configure_style()
        self._set_window_icon()
        
        # Bi·∫øn tr·∫°ng th√°i
        self.config = Config()
        self.shortcut_manager = ShortcutManager(self.config)
        self.keyboard_monitor = KeyboardMonitor(self.shortcut_manager)
        self.selected_index = None
        self.on_minimize_to_tray = None
        self.current_shortcuts = []  # Danh s√°ch shortcuts hi·ªán t·∫°i (c√≥ th·ªÉ ƒë√£ l·ªçc)
        
        # Setup callbacks
        self.keyboard_monitor.set_on_status_changed(self._on_monitoring_status_changed)
        self.shortcut_manager.set_on_shortcut_triggered(self._on_shortcut_triggered)
        
        # T·∫°o giao di·ªán hi·ªán ƒë·∫°i
        self._create_modern_ui()
        self._load_shortcuts()
        
        # X·ª≠ l√Ω s·ª± ki·ªán
        self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
        
    def _configure_style(self):
        """C·∫•u h√¨nh style hi·ªán ƒë·∫°i v·ªõi font SVN Poppins cho ttk widgets"""
        self.style = ttk.Style()
        
        # Configure modern theme
        self.style.theme_use('clam')
        
        # Configure Notebook style v·ªõi SVN Poppins
        self.style.configure('Modern.TNotebook', 
                           background=ModernStyle.GRAY_50,
                           borderwidth=0)
        self.style.configure('Modern.TNotebook.Tab', 
                           padding=[24, 12],
                           font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, 'medium'),
                           background=ModernStyle.GRAY_200,
                           focuscolor='none')
        self.style.map('Modern.TNotebook.Tab',
                      background=[('selected', ModernStyle.WHITE),
                                ('active', ModernStyle.GRAY_100)])
        
        # Configure Button styles v·ªõi SVN Poppins
        self.style.configure('Primary.TButton',
                           font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, 'semibold'),
                           background=ModernStyle.PRIMARY,
                           foreground=ModernStyle.WHITE,
                           borderwidth=0,
                           focuscolor='none',
                           padding=[16, 8])
        self.style.map('Primary.TButton',
                      background=[('active', ModernStyle.PRIMARY_LIGHT),
                                ('pressed', ModernStyle.PRIMARY_DARK)])
        
        self.style.configure('Secondary.TButton',
                           font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, 'medium'),
                           background=ModernStyle.GRAY_200,
                           foreground=ModernStyle.GRAY_700,
                           borderwidth=0,
                           focuscolor='none',
                           padding=[16, 8])
        self.style.map('Secondary.TButton',
                      background=[('active', ModernStyle.GRAY_300),
                                ('pressed', ModernStyle.GRAY_400)])
        
        self.style.configure('Success.TButton',
                           font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, 'semibold'),
                           background=ModernStyle.SECONDARY,
                           foreground=ModernStyle.WHITE,
                           borderwidth=0,
                           focuscolor='none',
                           padding=[16, 8])
        self.style.map('Success.TButton',
                      background=[('active', ModernStyle.SECONDARY_LIGHT)])
        
        self.style.configure('Danger.TButton',
                           font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, 'semibold'),
                           background=ModernStyle.DANGER,
                           foreground=ModernStyle.WHITE,
                           borderwidth=0,
                           focuscolor='none',
                           padding=[16, 8])
        
        # Configure Treeview v·ªõi SVN Poppins
        self.style.configure('Modern.Treeview',
                           background=ModernStyle.WHITE,
                           foreground=ModernStyle.GRAY_800,
                           fieldbackground=ModernStyle.WHITE,
                           borderwidth=0,
                           font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL))
        self.style.configure('Modern.Treeview.Heading',
                           background=ModernStyle.GRAY_100,
                           foreground=ModernStyle.GRAY_700,
                           font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, 'semibold'),
                           borderwidth=0)
        self.style.map('Modern.Treeview',
                      background=[('selected', ModernStyle.PRIMARY_LIGHT)],
                      foreground=[('selected', ModernStyle.WHITE)])
        
        # Configure LabelFrame v·ªõi SVN Poppins
        self.style.configure('Modern.TLabelframe',
                           background=ModernStyle.WHITE,
                           borderwidth=1,
                           relief='solid',
                           bordercolor=ModernStyle.GRAY_200)
        self.style.configure('Modern.TLabelframe.Label',
                           background=ModernStyle.WHITE,
                           foreground=ModernStyle.GRAY_700,
                           font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, 'semibold'))
        
        # Configure Entry v·ªõi SVN Poppins
        self.style.configure('Modern.TEntry',
                           fieldbackground=ModernStyle.WHITE,
                           borderwidth=1,
                           relief='solid',
                           bordercolor=ModernStyle.GRAY_300,
                           font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL))
        self.style.map('Modern.TEntry',
                      bordercolor=[('focus', ModernStyle.PRIMARY)])
        
        # Configure Checkbutton v·ªõi SVN Poppins
        self.style.configure('Modern.TCheckbutton',
                           background=ModernStyle.WHITE,
                           foreground=ModernStyle.GRAY_700,
                           font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL),
                           focuscolor='none')
        
        # Configure Radiobutton v·ªõi SVN Poppins
        self.style.configure('Modern.TRadiobutton',
                           background=ModernStyle.WHITE,
                           foreground=ModernStyle.GRAY_700,
                           font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL),
                           focuscolor='none')
    
    def _set_window_icon(self):
        """Thi·∫øt l·∫≠p icon cho c·ª≠a s·ªï ch√≠nh"""
        try:
            import os
            from PIL import Image, ImageTk
            
            icon_path = "icon.png"
            if os.path.exists(icon_path):
                image = Image.open(icon_path)
                image = image.resize((32, 32), Image.Resampling.LANCZOS)
                if image.mode != 'RGBA':
                    image = image.convert('RGBA')
                self.window_icon = ImageTk.PhotoImage(image)
                self.root.iconphoto(True, self.window_icon)
        except Exception as e:
            print(f"L·ªói khi thi·∫øt l·∫≠p icon c·ª≠a s·ªï: {e}")
    
    def _create_modern_ui(self):
        """T·∫°o giao di·ªán hi·ªán ƒë·∫°i"""
        # Configure root background
        self.root.configure(bg=ModernStyle.GRAY_50)
        
        # Main container v·ªõi padding
        self.main_container = tk.Frame(self.root, bg=ModernStyle.GRAY_50)
        self.main_container.pack(fill=tk.BOTH, expand=True, padx=ModernStyle.SPACE_LG, pady=ModernStyle.SPACE_LG)
        
        # Header section
        self._create_header()
        
        # Content section v·ªõi tabs
        self._create_content()
        
        # Footer section
        self._create_footer()
    
    def _create_header(self):
        """T·∫°o header v·ªõi th√¥ng tin tr·∫°ng th√°i s·ª≠ d·ª•ng icons hi·ªán ƒë·∫°i"""
        header_frame = tk.Frame(self.main_container, bg=ModernStyle.WHITE, relief='solid', bd=1)
        header_frame.pack(fill=tk.X, pady=(0, ModernStyle.SPACE_LG))
        
        # Header content v·ªõi padding
        header_content = tk.Frame(header_frame, bg=ModernStyle.WHITE)
        header_content.pack(fill=tk.X, padx=ModernStyle.SPACE_LG, pady=ModernStyle.SPACE_MD)
        
        # Left side - App title v√† status
        left_frame = tk.Frame(header_content, bg=ModernStyle.WHITE)
        left_frame.pack(side=tk.LEFT, fill=tk.Y)
        
        # App title v·ªõi icon hi·ªán ƒë·∫°i
        title_label = tk.Label(left_frame, 
                              text=f"‚ú® Auto Text & Image {ModernIcons.WINDOW}",
                              font=ModernStyle.get_heading_font(1),
                              bg=ModernStyle.WHITE,
                              fg=ModernStyle.GRAY_800)
        title_label.pack(anchor=tk.W)
        
        # Status indicator v·ªõi icons ƒë·ªông
        status_frame = tk.Frame(left_frame, bg=ModernStyle.WHITE)
        status_frame.pack(anchor=tk.W, pady=(ModernStyle.SPACE_XS, 0))
        
        self.status_indicator = tk.Label(status_frame,
                                       text=ModernIcons.ACTIVE,
                                       font=ModernStyle.get_font(14, TypographyScale.SEMIBOLD),
                                       bg=ModernStyle.WHITE,
                                       fg=ModernColors.SUCCESS)
        self.status_indicator.pack(side=tk.LEFT)
        
        self.status_label = tk.Label(status_frame,
                                   text=f"{ModernIcons.HOTKEY} ƒêang theo d√µi b√†n ph√≠m",
                                   font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, TypographyScale.MEDIUM),
                                   bg=ModernStyle.WHITE,
                                   fg=ModernStyle.GRAY_600)
        self.status_label.pack(side=tk.LEFT, padx=(ModernStyle.SPACE_XS, 0))
        
        # Right side - Count info v·ªõi icons
        right_frame = tk.Frame(header_content, bg=ModernStyle.WHITE)
        right_frame.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.count_label = tk.Label(right_frame,
                                  text=f"{ModernIcons.SHORTCUTS} 0 shortcuts",
                                  font=ModernStyle.get_font(ModernStyle.FONT_SIZE_LARGE, TypographyScale.BOLD),
                                  bg=ModernStyle.WHITE,
                                  fg=ModernStyle.PRIMARY)
        self.count_label.pack(anchor=tk.E)
        
        # Performance info v·ªõi icon
        self.perf_label = tk.Label(right_frame,
                                 text=f"{ModernIcons.BALANCED} Ch·∫ø ƒë·ªô: C√¢n b·∫±ng | {ModernIcons.WINDOW} 1440x1080",
                                 font=ModernStyle.get_font(ModernStyle.FONT_SIZE_SMALL, TypographyScale.MEDIUM),
                                 bg=ModernStyle.WHITE,
                                 fg=ModernStyle.GRAY_500)
        self.perf_label.pack(anchor=tk.E)
    
    def _create_content(self):
        """T·∫°o ph·∫ßn n·ªôi dung ch√≠nh v·ªõi tabs c√≥ icons hi·ªán ƒë·∫°i"""
        # Notebook container
        notebook_container = tk.Frame(self.main_container, bg=ModernStyle.GRAY_50)
        notebook_container.pack(fill=tk.BOTH, expand=True, pady=(0, ModernStyle.SPACE_LG))
        
        # Modern Notebook
        self.notebook = ttk.Notebook(notebook_container, style='Modern.TNotebook')
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Tab Shortcuts v·ªõi icon
        self.shortcuts_tab = tk.Frame(self.notebook, bg=ModernStyle.WHITE)
        self.notebook.add(self.shortcuts_tab, text=f"{ModernIcons.SHORTCUTS} Qu·∫£n l√Ω Shortcuts")
        self._create_shortcuts_tab()
        
        # Tab Settings v·ªõi icon
        self.settings_tab = tk.Frame(self.notebook, bg=ModernStyle.WHITE)
        self.notebook.add(self.settings_tab, text=f"{ModernIcons.SETTINGS} C√†i ƒë·∫∑t")
        self._create_settings_tab()
    
    def _create_shortcuts_tab(self):
        """T·∫°o tab qu·∫£n l√Ω shortcuts v·ªõi layout hi·ªán ƒë·∫°i"""
        # Container v·ªõi padding
        container = tk.Frame(self.shortcuts_tab, bg=ModernStyle.WHITE)
        container.pack(fill=tk.BOTH, expand=True, padx=ModernStyle.SPACE_LG, pady=ModernStyle.SPACE_LG)
        
        # Layout responsive: 70% list, 30% form
        container.grid_columnconfigure(0, weight=7, minsize=400)
        container.grid_columnconfigure(1, weight=3, minsize=300)
        container.grid_rowconfigure(0, weight=1)
        
        # Left panel - Shortcuts list
        self._create_shortcuts_list(container)
        
        # Right panel - Form
        self._create_shortcut_form(container)
    
    def _create_shortcuts_list(self, parent):
        """T·∫°o danh s√°ch shortcuts v·ªõi icons hi·ªán ƒë·∫°i"""
        # List container
        list_frame = ttk.LabelFrame(parent, text=f"{ModernIcons.SHORTCUTS} Danh s√°ch Shortcuts", style='Modern.TLabelframe')
        list_frame.grid(row=0, column=0, sticky="nsew", padx=(0, ModernStyle.SPACE_MD))
        list_frame.grid_columnconfigure(0, weight=1)
        list_frame.grid_rowconfigure(1, weight=1)  # Treeview ·ªü row 1
        
        # List content
        list_content = tk.Frame(list_frame, bg=ModernStyle.WHITE)
        list_content.pack(fill=tk.BOTH, expand=True, padx=ModernStyle.SPACE_MD, pady=ModernStyle.SPACE_MD)
        list_content.grid_columnconfigure(0, weight=1)
        list_content.grid_rowconfigure(1, weight=1)  # Treeview ·ªü row 1
        
        # Search frame
        search_frame = tk.Frame(list_content, bg=ModernStyle.WHITE)
        search_frame.grid(row=0, column=0, sticky="ew", pady=(0, ModernStyle.SPACE_SM))
        search_frame.grid_columnconfigure(1, weight=1)
        
        # Search label
        search_label = tk.Label(search_frame, text=f"{ModernIcons.SEARCH} T√¨m ki·∫øm shortcut:",
                               font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, TypographyScale.SEMIBOLD),
                               bg=ModernStyle.WHITE, fg=ModernStyle.GRAY_700)
        search_label.grid(row=0, column=0, sticky="w", padx=(0, ModernStyle.SPACE_SM))
        
        # Search entry
        self.search_var = tk.StringVar()
        self.search_entry = ttk.Entry(search_frame, textvariable=self.search_var, 
                                     style='Modern.TEntry',
                                     font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL))
        self.search_entry.grid(row=0, column=1, sticky="ew")
        
        # Bind search event
        self.search_var.trace_add('write', self._on_search_changed)
        
        # Clear search button
        clear_search_btn = ttk.Button(search_frame, text=f"{ModernIcons.CLEAR}", 
                                     command=self._clear_search, style='Secondary.TButton')
        clear_search_btn.grid(row=0, column=2, sticky="w", padx=(ModernStyle.SPACE_XS, 0))
        
        # Treeview v·ªõi style hi·ªán ƒë·∫°i v√† icons
        columns = ('keyword', 'type', 'content', 'status')
        self.tree = ttk.Treeview(list_content, columns=columns, show='headings', 
                               style='Modern.Treeview', height=15)
        
        # Configure columns v·ªõi icons
        self.tree.heading('keyword', text=f'{ModernIcons.KEYWORD} T·ª´ kh√≥a')
        self.tree.heading('type', text=f'{ModernIcons.CONTENT} Lo·∫°i')
        self.tree.heading('content', text=f'{ModernIcons.TEXT} N·ªôi dung')
        self.tree.heading('status', text=f'{ModernIcons.ACTIVE} Tr·∫°ng th√°i')
        
        self.tree.column('keyword', width=120, minwidth=80)
        self.tree.column('type', width=80, minwidth=60)
        self.tree.column('content', width=250, minwidth=150)
        self.tree.column('status', width=80, minwidth=60)
        
        # Scrollbar
        scrollbar_y = ttk.Scrollbar(list_content, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar_y.set)
        
        scrollbar_x = ttk.Scrollbar(list_content, orient=tk.HORIZONTAL, command=self.tree.xview)
        self.tree.configure(xscrollcommand=scrollbar_x.set)
        
        # Grid layout - treeview ·ªü row 1
        self.tree.grid(row=1, column=0, sticky="nsew")
        scrollbar_y.grid(row=1, column=1, sticky="ns")
        scrollbar_x.grid(row=2, column=0, sticky="ew")
        
        # Bind events
        self.tree.bind('<<TreeviewSelect>>', self._on_select_shortcut)
        self.tree.bind('<Double-1>', lambda e: self._update_shortcut())
    
    def _create_shortcut_form(self, parent):
        """T·∫°o form th√™m/s·ª≠a shortcut v·ªõi icons hi·ªán ƒë·∫°i"""
        # Form container
        form_frame = ttk.LabelFrame(parent, text=f"{ModernIcons.EDIT} Th√™m/S·ª≠a Shortcut", style='Modern.TLabelframe')
        form_frame.grid(row=0, column=1, sticky="nsew")
        
        # Form content v·ªõi scroll
        canvas = tk.Canvas(form_frame, bg=ModernStyle.WHITE, highlightthickness=0)
        scrollbar = ttk.Scrollbar(form_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=ModernStyle.WHITE)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True, padx=ModernStyle.SPACE_MD, pady=ModernStyle.SPACE_MD)
        scrollbar.pack(side="right", fill="y")
        
        # Form fields
        self._create_form_fields(scrollable_frame)
        
        # Enable mouse wheel scrolling
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        canvas.bind("<MouseWheel>", _on_mousewheel)
    
    def _create_form_fields(self, parent):
        """T·∫°o c√°c tr∆∞·ªùng trong form v·ªõi icons hi·ªán ƒë·∫°i"""
        # Keyword field
        keyword_frame = tk.Frame(parent, bg=ModernStyle.WHITE)
        keyword_frame.pack(fill=tk.X, pady=(0, ModernStyle.SPACE_MD))
        
        tk.Label(keyword_frame, text=f"{ModernIcons.KEYWORD} T·ª´ kh√≥a:", 
                font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, TypographyScale.SEMIBOLD),
                bg=ModernStyle.WHITE, fg=ModernStyle.GRAY_700).pack(anchor=tk.W)
        self.keyword_entry = ttk.Entry(keyword_frame, style='Modern.TEntry', 
                                     font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL))
        self.keyword_entry.pack(fill=tk.X, pady=(ModernStyle.SPACE_XS, 0))
        
        # Type selection
        type_frame = tk.Frame(parent, bg=ModernStyle.WHITE)
        type_frame.pack(fill=tk.X, pady=(0, ModernStyle.SPACE_MD))
        
        tk.Label(type_frame, text=f"{ModernIcons.CONTENT} Lo·∫°i n·ªôi dung:",
                font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, TypographyScale.SEMIBOLD),
                bg=ModernStyle.WHITE, fg=ModernStyle.GRAY_700).pack(anchor=tk.W)
        
        self.type_var = tk.StringVar(value="text")
        type_buttons_frame = tk.Frame(type_frame, bg=ModernStyle.WHITE)
        type_buttons_frame.pack(fill=tk.X, pady=(ModernStyle.SPACE_XS, 0))
        
        # T·∫°o 3 radio buttons tr√™n c√πng 1 d√≤ng
        ttk.Radiobutton(type_buttons_frame, text=f"{ModernIcons.TEXT} VƒÉn b·∫£n", variable=self.type_var, 
                       value="text", style='Modern.TRadiobutton').pack(side=tk.LEFT)
        ttk.Radiobutton(type_buttons_frame, text=f"{ModernIcons.IMAGE} H√¨nh ·∫£nh", variable=self.type_var, 
                       value="image", style='Modern.TRadiobutton').pack(side=tk.LEFT, padx=(ModernStyle.SPACE_LG, 0))
        ttk.Radiobutton(type_buttons_frame, text=f"{ModernIcons.MIXED} VƒÉn b·∫£n + ·∫¢nh", variable=self.type_var, 
                       value="mixed", style='Modern.TRadiobutton').pack(side=tk.LEFT, padx=(ModernStyle.SPACE_LG, 0))
        
        # Content field
        content_frame = tk.Frame(parent, bg=ModernStyle.WHITE)
        content_frame.pack(fill=tk.BOTH, expand=True, pady=(0, ModernStyle.SPACE_MD))
        
        tk.Label(content_frame, text=f"{ModernIcons.CONTENT} N·ªôi dung:",
                font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, TypographyScale.SEMIBOLD),
                bg=ModernStyle.WHITE, fg=ModernStyle.GRAY_700).pack(anchor=tk.W)
        
        # Text area v·ªõi border hi·ªán ƒë·∫°i
        text_container = tk.Frame(content_frame, bg=ModernStyle.GRAY_300, bd=1, relief='solid')
        text_container.pack(fill=tk.BOTH, expand=True, pady=(ModernStyle.SPACE_XS, 0))
        
        self.content_text = tk.Text(text_container, wrap=tk.WORD, 
                                  font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL),
                                  bg=ModernStyle.WHITE, fg=ModernStyle.GRAY_800,
                                  borderwidth=0, highlightthickness=0,
                                  padx=ModernStyle.SPACE_SM, pady=ModernStyle.SPACE_SM)
        content_scroll = ttk.Scrollbar(text_container, orient=tk.VERTICAL, command=self.content_text.yview)
        self.content_text.configure(yscrollcommand=content_scroll.set)
        
        self.content_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        content_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Browse button cho image v·ªõi icon
        self.browse_button = ttk.Button(content_frame, text=f"{ModernIcons.BROWSE} Ch·ªçn ·∫£nh...", 
                                      command=self._browse_image, style='Secondary.TButton')
        self.browse_button.pack(pady=(ModernStyle.SPACE_XS, 0))
        self.browse_button.pack_forget()  # ·∫®n m·∫∑c ƒë·ªãnh
        
        # Mixed content area cho text + images
        self.mixed_frame = tk.Frame(content_frame, bg=ModernStyle.WHITE)
        self.mixed_frame.pack(fill=tk.X, pady=(ModernStyle.SPACE_XS, 0))
        self.mixed_frame.pack_forget()  # ·∫®n m·∫∑c ƒë·ªãnh
        
        # Text input cho mixed content
        mixed_text_label = tk.Label(self.mixed_frame, text=f"{ModernIcons.TEXT} VƒÉn b·∫£n (th·ª© t·ª± 1):",
                                   font=ModernStyle.get_font(ModernStyle.FONT_SIZE_SMALL, TypographyScale.MEDIUM),
                                   bg=ModernStyle.WHITE, fg=ModernStyle.GRAY_600)
        mixed_text_label.pack(anchor=tk.W)
        
        self.mixed_text = tk.Text(self.mixed_frame, height=3, wrap=tk.WORD,
                                 font=ModernStyle.get_font(ModernStyle.FONT_SIZE_SMALL),
                                 bg=ModernStyle.GRAY_50, fg=ModernStyle.GRAY_800,
                                 borderwidth=1, relief='solid')
        self.mixed_text.pack(fill=tk.X, pady=(ModernStyle.SPACE_XS, ModernStyle.SPACE_SM))
        
        # Images list cho mixed content
        mixed_images_label = tk.Label(self.mixed_frame, text=f"{ModernIcons.IMAGE} Danh s√°ch ·∫£nh (th·ª© t·ª± 1-20, t·ªëi ƒëa 20 ·∫£nh):",
                                     font=ModernStyle.get_font(ModernStyle.FONT_SIZE_SMALL, TypographyScale.MEDIUM),
                                     bg=ModernStyle.WHITE, fg=ModernStyle.GRAY_600)
        mixed_images_label.pack(anchor=tk.W)
        
        # Container cho danh s√°ch ·∫£nh v·ªõi scrollbar
        images_container = tk.Frame(self.mixed_frame, bg=ModernStyle.GRAY_300, bd=1, relief='solid')
        images_container.pack(fill=tk.BOTH, expand=True, pady=(ModernStyle.SPACE_XS, ModernStyle.SPACE_SM))
        
        # Listbox cho images v·ªõi scrollbar
        images_listbox_frame = tk.Frame(images_container, bg=ModernStyle.WHITE)
        images_listbox_frame.pack(fill=tk.BOTH, expand=True)
        
        self.images_listbox = tk.Listbox(images_listbox_frame, height=6,
                                        font=ModernStyle.get_font(ModernStyle.FONT_SIZE_SMALL),
                                        bg=ModernStyle.WHITE, fg=ModernStyle.GRAY_800,
                                        borderwidth=0, selectbackground=ModernStyle.PRIMARY_LIGHT)
        images_scroll = ttk.Scrollbar(images_listbox_frame, orient=tk.VERTICAL, command=self.images_listbox.yview)
        self.images_listbox.configure(yscrollcommand=images_scroll.set)
        
        self.images_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=ModernStyle.SPACE_XS, pady=ModernStyle.SPACE_XS)
        images_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Buttons cho qu·∫£n l√Ω ·∫£nh
        images_buttons_frame = tk.Frame(self.mixed_frame, bg=ModernStyle.WHITE)
        images_buttons_frame.pack(fill=tk.X)
        
        images_buttons_frame.grid_columnconfigure(0, weight=1)
        images_buttons_frame.grid_columnconfigure(1, weight=1)
        images_buttons_frame.grid_columnconfigure(2, weight=1)
        
        ttk.Button(images_buttons_frame, text=f"{ModernIcons.ADD} Th√™m ·∫£nh", 
                  command=self._add_image_to_mixed, style='Secondary.TButton').grid(row=0, column=0, sticky="ew", padx=(0, ModernStyle.SPACE_XS))
        ttk.Button(images_buttons_frame, text=f"{ModernIcons.DELETE} X√≥a ·∫£nh", 
                  command=self._remove_image_from_mixed, style='Secondary.TButton').grid(row=0, column=1, sticky="ew", padx=(ModernStyle.SPACE_XS, ModernStyle.SPACE_XS))
        ttk.Button(images_buttons_frame, text=f"{ModernIcons.CLEAR} X√≥a t·∫•t c·∫£", 
                  command=self._clear_all_images, style='Secondary.TButton').grid(row=0, column=2, sticky="ew", padx=(ModernStyle.SPACE_XS, 0))
        
        # Enabled checkbox v·ªõi icon
        enabled_frame = tk.Frame(parent, bg=ModernStyle.WHITE)
        enabled_frame.pack(fill=tk.X, pady=(0, ModernStyle.SPACE_LG))
        
        self.enabled_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(enabled_frame, text=f"{ModernIcons.SUCCESS} K√≠ch ho·∫°t shortcut", 
                       variable=self.enabled_var, style='Modern.TCheckbutton').pack(anchor=tk.W)
        
        # Action buttons
        self._create_form_buttons(parent)
        
        # Bind type change event
        self.type_var.trace('w', self._on_type_changed)
    
    def _create_form_buttons(self, parent):
        """T·∫°o c√°c n√∫t action cho form v·ªõi icons hi·ªán ƒë·∫°i"""
        buttons_frame = tk.Frame(parent, bg=ModernStyle.WHITE)
        buttons_frame.pack(fill=tk.X, pady=(ModernStyle.SPACE_LG, 0))
        
        # Primary actions
        primary_frame = tk.Frame(buttons_frame, bg=ModernStyle.WHITE)
        primary_frame.pack(fill=tk.X, pady=(0, ModernStyle.SPACE_SM))
        
        ttk.Button(primary_frame, text=f"{ModernIcons.ADD} Th√™m m·ªõi", 
                  command=self._add_shortcut, style='Primary.TButton').pack(fill=tk.X, pady=(0, ModernStyle.SPACE_XS))
        ttk.Button(primary_frame, text=f"{ModernIcons.SAVE} C·∫≠p nh·∫≠t", 
                  command=self._update_shortcut, style='Success.TButton').pack(fill=tk.X, pady=(0, ModernStyle.SPACE_XS))
        
        # Secondary actions
        secondary_frame = tk.Frame(buttons_frame, bg=ModernStyle.WHITE)
        secondary_frame.pack(fill=tk.X)
        
        secondary_frame.grid_columnconfigure(0, weight=1)
        secondary_frame.grid_columnconfigure(1, weight=1)
        
        ttk.Button(secondary_frame, text=f"{ModernIcons.DELETE} X√≥a", 
                  command=self._delete_shortcut, style='Danger.TButton').grid(row=0, column=0, sticky="ew", padx=(0, ModernStyle.SPACE_XS))
        ttk.Button(secondary_frame, text=f"{ModernIcons.CLEAR} L√†m m·ªõi", 
                  command=self._clear_form, style='Secondary.TButton').grid(row=0, column=1, sticky="ew", padx=(ModernStyle.SPACE_XS, 0))
    
    def _create_settings_tab(self):
        """T·∫°o tab c√†i ƒë·∫∑t v·ªõi layout hi·ªán ƒë·∫°i"""
        # Container v·ªõi padding
        container = tk.Frame(self.settings_tab, bg=ModernStyle.WHITE)
        container.pack(fill=tk.BOTH, expand=True, padx=ModernStyle.SPACE_LG, pady=ModernStyle.SPACE_LG)
        
        # Responsive grid layout
        container.grid_columnconfigure(0, weight=1)
        container.grid_columnconfigure(1, weight=1)
        
        # Left column - Performance settings
        self._create_performance_settings(container)
        
        # Right column - System settings v√† info
        self._create_system_settings(container)
    
    def _create_performance_settings(self, parent):
        """T·∫°o c√†i ƒë·∫∑t hi·ªáu su·∫•t v·ªõi icons hi·ªán ƒë·∫°i"""
        perf_frame = ttk.LabelFrame(parent, text=f"{ModernIcons.PERFORMANCE} C√†i ƒë·∫∑t hi·ªáu su·∫•t", style='Modern.TLabelframe')
        perf_frame.grid(row=0, column=0, sticky="new", padx=(0, ModernStyle.SPACE_MD), pady=(0, ModernStyle.SPACE_LG))
        
        content = tk.Frame(perf_frame, bg=ModernStyle.WHITE)
        content.pack(fill=tk.BOTH, expand=True, padx=ModernStyle.SPACE_MD, pady=ModernStyle.SPACE_MD)
        
        # Instant trigger v·ªõi icon
        self.instant_trigger_var = tk.BooleanVar(value=False)
        instant_check = ttk.Checkbutton(
            content,
            text=f"{ModernIcons.ULTRA_FAST} Trigger ngay l·∫≠p t·ª©c (T·ªëc ƒë·ªô t·ªëi ƒëa)",
            variable=self.instant_trigger_var,
            command=self._on_instant_trigger_changed,
            style='Modern.TCheckbutton'
        )
        instant_check.pack(anchor=tk.W, pady=(0, ModernStyle.SPACE_MD))
        
        # Delay setting v·ªõi icon
        delay_frame = tk.Frame(content, bg=ModernStyle.WHITE)
        delay_frame.pack(fill=tk.X, pady=(0, ModernStyle.SPACE_MD))
        
        self.delay_label = tk.Label(delay_frame, text=f"{ModernIcons.LOADING} Th·ªùi gian ch·ªù:",
                                  font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, TypographyScale.SEMIBOLD),
                                  bg=ModernStyle.WHITE, fg=ModernStyle.GRAY_700)
        self.delay_label.pack(anchor=tk.W)
        
        delay_input_frame = tk.Frame(delay_frame, bg=ModernStyle.WHITE)
        delay_input_frame.pack(fill=tk.X, pady=(ModernStyle.SPACE_XS, 0))
        
        self.delay_var = tk.DoubleVar(value=0.1)
        self.delay_spinbox = ttk.Spinbox(
            delay_input_frame, 
            from_=0.01, 
            to=1.0, 
            increment=0.01, 
            width=8,
            textvariable=self.delay_var,
            command=self._on_delay_changed,
            format="%.2f",
            font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL)
        )
        self.delay_spinbox.pack(side=tk.LEFT)
        tk.Label(delay_input_frame, text="gi√¢y", 
                font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL),
                bg=ModernStyle.WHITE, fg=ModernStyle.GRAY_600).pack(side=tk.LEFT, padx=(ModernStyle.SPACE_XS, 0))
        
        # Preset buttons v·ªõi icons hi·ªán ƒë·∫°i
        presets_frame = tk.Frame(content, bg=ModernStyle.WHITE)
        presets_frame.pack(fill=tk.X, pady=(ModernStyle.SPACE_MD, 0))
        
        tk.Label(presets_frame, text=f"{ModernIcons.FAST} Presets nhanh:",
                font=ModernStyle.get_font(ModernStyle.FONT_SIZE_NORMAL, TypographyScale.SEMIBOLD),
                bg=ModernStyle.WHITE, fg=ModernStyle.GRAY_700).pack(anchor=tk.W, pady=(0, ModernStyle.SPACE_XS))
        
        preset_buttons = tk.Frame(presets_frame, bg=ModernStyle.WHITE)
        preset_buttons.pack(fill=tk.X)
        preset_buttons.grid_columnconfigure(0, weight=1)
        preset_buttons.grid_columnconfigure(1, weight=1)
        
        ttk.Button(preset_buttons, text=f"{ModernIcons.ULTRA_FAST} Si√™u nhanh", 
                  command=lambda: self._set_preset("ultra"), style='Primary.TButton').grid(row=0, column=0, sticky="ew", padx=(0, ModernStyle.SPACE_XS), pady=(0, ModernStyle.SPACE_XS))
        ttk.Button(preset_buttons, text=f"{ModernIcons.FAST} Nhanh", 
                  command=lambda: self._set_preset("fast"), style='Secondary.TButton').grid(row=0, column=1, sticky="ew", padx=(ModernStyle.SPACE_XS, 0), pady=(0, ModernStyle.SPACE_XS))
        ttk.Button(preset_buttons, text=f"{ModernIcons.BALANCED} C√¢n b·∫±ng", 
                  command=lambda: self._set_preset("balanced"), style='Secondary.TButton').grid(row=1, column=0, sticky="ew", padx=(0, ModernStyle.SPACE_XS))
        ttk.Button(preset_buttons, text=f"{ModernIcons.SAFE} An to√†n", 
                  command=lambda: self._set_preset("safe"), style='Secondary.TButton').grid(row=1, column=1, sticky="ew", padx=(ModernStyle.SPACE_XS, 0))
        
        # Bind events
        self.delay_var.trace('w', self._on_delay_changed)
    
    def _create_system_settings(self, parent):
        """T·∫°o c√†i ƒë·∫∑t h·ªá th·ªëng v·ªõi icons hi·ªán ƒë·∫°i"""
        # System settings
        system_frame = ttk.LabelFrame(parent, text=f"{ModernIcons.SYSTEM} C√†i ƒë·∫∑t h·ªá th·ªëng", style='Modern.TLabelframe')
        system_frame.grid(row=0, column=1, sticky="new", pady=(0, ModernStyle.SPACE_LG))
        
        system_content = tk.Frame(system_frame, bg=ModernStyle.WHITE)
        system_content.pack(fill=tk.BOTH, expand=True, padx=ModernStyle.SPACE_MD, pady=ModernStyle.SPACE_MD)
        
        # Autostart v·ªõi icon
        self.autostart_var = tk.BooleanVar(value=is_autostart_enabled())
        autostart_check = ttk.Checkbutton(
            system_content, 
            text=f"{ModernIcons.PLAY} Kh·ªüi ƒë·ªông c√πng Windows",
            variable=self.autostart_var,
            command=self._toggle_autostart,
            style='Modern.TCheckbutton'
        )
        autostart_check.pack(anchor=tk.W, pady=(0, ModernStyle.SPACE_SM))
        
        # Minimize to tray v·ªõi icon
        self.minimize_to_tray_var = tk.BooleanVar(value=True)
        minimize_check = ttk.Checkbutton(
            system_content,
            text=f"{ModernIcons.TRAY} Thu nh·ªè xu·ªëng khay khi ƒë√≥ng",
            variable=self.minimize_to_tray_var,
            style='Modern.TCheckbutton'
        )
        minimize_check.pack(anchor=tk.W)
        
        # App info v·ªõi layout hi·ªán ƒë·∫°i
        info_frame = ttk.LabelFrame(parent, text=f"{ModernIcons.INFO} Th√¥ng tin ·ª©ng d·ª•ng", style='Modern.TLabelframe')
        info_frame.grid(row=1, column=0, columnspan=2, sticky="ew", pady=(0, ModernStyle.SPACE_LG))
        
        info_content = tk.Frame(info_frame, bg=ModernStyle.WHITE)
        info_content.pack(fill=tk.BOTH, expand=True, padx=ModernStyle.SPACE_MD, pady=ModernStyle.SPACE_MD)
        
        info_text = tk.Text(info_content, height=12, wrap=tk.WORD,
                           font=ModernStyle.get_font(ModernStyle.FONT_SIZE_SMALL),
                           bg=ModernStyle.GRAY_50, fg=ModernStyle.GRAY_700,
                           borderwidth=0, padx=ModernStyle.SPACE_SM, pady=ModernStyle.SPACE_SM)
        info_text.pack(fill=tk.BOTH, expand=True)
        
        info_content_text = f"""‚ú® Auto Text & Image v1.3.6 - Single Instance Control

{ModernIcons.TEXT} Font m·ªõi - SVN Poppins:
‚Ä¢ Font ti·∫øng Vi·ªát ƒë·∫πp, hi·ªán ƒë·∫°i v√† d·ªÖ ƒë·ªçc
‚Ä¢ H·ªó tr·ª£ ƒë·∫ßy ƒë·ªß d·∫•u ti·∫øng Vi·ªát
‚Ä¢ Multiple weights: Regular, Medium, SemiBold, Bold
‚Ä¢ T·ª± ƒë·ªông fallback v·ªÅ Segoe UI n·∫øu kh√¥ng load ƒë∆∞·ª£c

{ModernIcons.WINDOW} Ch·∫ø ƒë·ªô c·ª≠a s·ªï 1440x1080:
‚Ä¢ K√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh t·ªëi ∆∞u cho m√†n h√¨nh desktop
‚Ä¢ C√≥ th·ªÉ resize v√† di chuy·ªÉn c·ª≠a s·ªï
‚Ä¢ K√≠ch th∆∞·ªõc t·ªëi thi·ªÉu 1200x800
‚Ä¢ Hotkey tho√°t kh·∫©n c·∫•p: Ctrl+Alt+Q

{ModernIcons.LOCK} Single Instance Control:
‚Ä¢ Ch·ªâ cho ph√©p 1 phi√™n b·∫£n ch·∫°y c√πng l√∫c
‚Ä¢ T·ª± ƒë·ªông hi·ªán c·ª≠a s·ªï khi m·ªü app l·∫ßn 2
‚Ä¢ NgƒÉn multiple icons trong system tray
‚Ä¢ File locking + inter-process communication

{ModernIcons.SEARCH} T√≠nh nƒÉng t√¨m ki·∫øm m·ªõi:
‚Ä¢ T√¨m ki·∫øm shortcut theo keyword real-time
‚Ä¢ Ch·ªâ t√¨m theo t·ª´ kh√≥a, kh√¥ng t√¨m theo lo·∫°i/n·ªôi dung
‚Ä¢ Giao di·ªán hi·ªán ƒë·∫°i v·ªõi icon üîç v√† n√∫t x√≥a üßπ
‚Ä¢ Hi·ªÉn th·ªã "X/Y shortcuts" khi c√≥ k·∫øt qu·∫£ t√¨m ki·∫øm

{ModernIcons.EDIT} Giao di·ªán hi·ªán ƒë·∫°i:
‚Ä¢ Thi·∫øt k·∫ø v·ªõi SVN Poppins typography system
‚Ä¢ Layout responsive, t·ªëi ∆∞u cho k√≠ch th∆∞·ªõc 1440x1080
‚Ä¢ Icons v√† visual elements gi√∫p d·ªÖ nh·∫≠n di·ªán
‚Ä¢ Hover effects v√† interactive elements

{ModernIcons.PERFORMANCE} T√≠nh nƒÉng:
‚Ä¢ G·ªôp Text & Rich Text: Ch·ªâ "VƒÉn b·∫£n" v√† "·∫¢nh"
‚Ä¢ H·ªó tr·ª£ t·∫•t c·∫£ k√Ω t·ª±: @ # $ % ^ & * v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
‚Ä¢ Trigger ngay l·∫≠p t·ª©c ho·∫∑c v·ªõi delay t√πy ch·ªânh
‚Ä¢ T·ªëi ∆∞u thu·∫≠t to√°n v·ªõi cache v√† t√¨m ki·∫øm th√¥ng minh

{ModernIcons.SUCCESS} S·ª≠a l·ªói t·ªëc ƒë·ªô cao (v1.3.1):
‚Ä¢ S·ª≠a race condition ·ªü ch·∫ø ƒë·ªô "Si√™u nhanh" v√† "Nhanh"
‚Ä¢ Tu·∫ßn t·ª± h√≥a: X√≥a ‚Üí Copy ‚Üí Paste (thay v√¨ song song)
‚Ä¢ C·∫£i ti·∫øn clipboard verification cho ·∫£nh
‚Ä¢ Logging chi ti·∫øt ƒë·ªÉ debug (xem console)

{ModernIcons.HOTKEY} C√°ch s·ª≠ d·ª•ng:
1. Th√™m shortcut: Nh·∫≠p t·ª´ kh√≥a + n·ªôi dung
2. G√µ t·ª´ kh√≥a ‚Üí thay th·∫ø t·ª± ƒë·ªông
3. H·ªó tr·ª£ text thu·∫ßn v√† HTML
4. T·ª´ kh√≥a c√≥ th·ªÉ ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát

{ModernIcons.FAST} Presets hi·ªáu su·∫•t:
‚Ä¢ {ModernIcons.ULTRA_FAST} Si√™u nhanh: Ph·∫£n h·ªìi t·ª©c th√¨ (ƒë√£ s·ª≠a l·ªói)
‚Ä¢ {ModernIcons.FAST} Nhanh: Delay 0.05s (ƒë√£ s·ª≠a l·ªói)
‚Ä¢ {ModernIcons.BALANCED} C√¢n b·∫±ng: Delay 0.1s (khuy·∫øn ngh·ªã)
‚Ä¢ {ModernIcons.SAFE} An to√†n: Delay 0.3s

{ModernIcons.SYSTEM} ƒêi·ªÅu khi·ªÉn:
‚Ä¢ Tho√°t: Click n√∫t X ho·∫∑c Ctrl+Alt+Q
‚Ä¢ ·∫®n: Thu nh·ªè xu·ªëng system tray
‚Ä¢ C√≥ th·ªÉ minimize v√† resize c·ª≠a s·ªï
‚Ä¢ Font SVN Poppins ƒë∆∞·ª£c load t·ª± ƒë·ªông khi kh·ªüi ƒë·ªông"""
        
        info_text.insert(1.0, info_content_text)
        info_text.config(state=tk.DISABLED)
    
    def _create_footer(self):
        """T·∫°o footer v·ªõi c√°c n√∫t action ch√≠nh v√† icons"""
        footer_frame = tk.Frame(self.main_container, bg=ModernStyle.WHITE, relief='solid', bd=1)
        footer_frame.pack(fill=tk.X)
        
        footer_content = tk.Frame(footer_frame, bg=ModernStyle.WHITE)
        footer_content.pack(fill=tk.X, padx=ModernStyle.SPACE_LG, pady=ModernStyle.SPACE_MD)
        
        # Left side - Import/Export v·ªõi icons
        left_frame = tk.Frame(footer_content, bg=ModernStyle.WHITE)
        left_frame.pack(side=tk.LEFT)
        
        ttk.Button(left_frame, text=f"{ModernIcons.IMPORT} Import", 
                  command=self._import_config, style='Secondary.TButton').pack(side=tk.LEFT, padx=(0, ModernStyle.SPACE_SM))
        ttk.Button(left_frame, text=f"{ModernIcons.EXPORT} Export", 
                  command=self._export_config, style='Secondary.TButton').pack(side=tk.LEFT)
        
        # Right side - App info v·ªõi version
        right_frame = tk.Frame(footer_content, bg=ModernStyle.WHITE)
        right_frame.pack(side=tk.RIGHT)
        
        tk.Label(right_frame, text=f"‚ú® Auto Text & Image v1.3.6 - Search + 1440x1080 {ModernIcons.WINDOW}",
                font=ModernStyle.get_font(ModernStyle.FONT_SIZE_SMALL, TypographyScale.MEDIUM),
                bg=ModernStyle.WHITE, fg=ModernStyle.GRAY_500).pack()
    
    def _on_resize(self, event):
        """Disabled - kh√¥ng cho ph√©p resize c·ª≠a s·ªï"""
        # Method n√†y ƒë√£ ƒë∆∞·ª£c v√¥ hi·ªáu h√≥a v√¨ c·ª≠a s·ªï ch·∫°y fullscreen c·ªë ƒë·ªãnh
        pass
    
    def _update_performance_info(self):
        """C·∫≠p nh·∫≠t th√¥ng tin hi·ªáu su·∫•t v·ªõi icons hi·ªán ƒë·∫°i"""
        if self.instant_trigger_var.get():
            mode = "Si√™u nhanh"
            mode_icon = ModernIcons.ULTRA_FAST
        else:
            delay = self.delay_var.get()
            if delay <= 0.05:
                mode = "Nhanh"
                mode_icon = ModernIcons.FAST
            elif delay <= 0.15:
                mode = "C√¢n b·∫±ng"
                mode_icon = ModernIcons.BALANCED
            else:
                mode = "An to√†n"
                mode_icon = ModernIcons.SAFE
        
        # C·∫≠p nh·∫≠t v·ªõi icons hi·ªán ƒë·∫°i
        self.perf_label.config(text=f"{mode_icon} Ch·∫ø ƒë·ªô: {mode} | {ModernIcons.WINDOW} 1440x1080")
    
    def _on_instant_trigger_changed(self):
        """X·ª≠ l√Ω khi thay ƒë·ªïi ch·∫ø ƒë·ªô instant trigger v·ªõi icons hi·ªán ƒë·∫°i"""
        instant_enabled = self.instant_trigger_var.get()
        self.keyboard_monitor.set_instant_trigger(instant_enabled)
        
        # V√¥ hi·ªáu h√≥a delay setting khi instant trigger ƒë∆∞·ª£c b·∫≠t
        if instant_enabled:
            self.delay_spinbox.config(state='disabled')
            self.delay_label.config(text=f"{ModernIcons.ULTRA_FAST} Th·ªùi gian ch·ªù (ƒê√£ t·∫Øt - D√πng trigger ngay):")
        else:
            self.delay_spinbox.config(state='normal')
            self.delay_label.config(text=f"{ModernIcons.LOADING} Th·ªùi gian ch·ªù:")
        
        self._update_performance_info()
    
    def _on_delay_changed(self, *args):
        """X·ª≠ l√Ω khi thay ƒë·ªïi th·ªùi gian delay"""
        try:
            new_delay = self.delay_var.get()
            if 0.01 <= new_delay <= 1.0:
                self.keyboard_monitor.set_auto_trigger_delay(new_delay)
                self._update_performance_info()
        except:
            pass  # Ignore invalid values
    
    def _on_type_changed(self, *args):
        """X·ª≠ l√Ω khi thay ƒë·ªïi lo·∫°i shortcut"""
        content_type = self.type_var.get()
        
        if content_type == "image":
            # Hi·ªÉn th·ªã browse button, ·∫©n mixed frame
            self.browse_button.pack(pady=(ModernStyle.SPACE_XS, 0))
            self.mixed_frame.pack_forget()
            self.content_text.config(height=6)
        elif content_type == "mixed":
            # Hi·ªÉn th·ªã mixed frame, ·∫©n browse button  
            self.browse_button.pack_forget()
            self.mixed_frame.pack(fill=tk.X, pady=(ModernStyle.SPACE_XS, 0))
            self.content_text.config(height=3)
        else:
            # Text content - ·∫©n c·∫£ hai
            self.browse_button.pack_forget()
            self.mixed_frame.pack_forget()
            self.content_text.config(height=12)
    
    def _browse_image(self):
        """Ch·ªçn file ·∫£nh"""
        filename = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh",
            filetypes=[("Image files", "*.png *.jpg *.jpeg *.gif *.bmp"), ("All files", "*.*")]
        )
        if filename:
            self.content_text.delete(1.0, tk.END)
            self.content_text.insert(1.0, filename)
    
    def _add_image_to_mixed(self):
        """Th√™m ·∫£nh v√†o mixed content"""
        if self.images_listbox.size() >= 20:
            messagebox.showwarning(f"{ModernIcons.WARNING} C·∫£nh b√°o", "T·ªëi ƒëa 20 ·∫£nh!")
            return
            
        filename = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh ƒë·ªÉ th√™m",
            filetypes=[("Image files", "*.png *.jpg *.jpeg *.gif *.bmp"), ("All files", "*.*")]
        )
        if filename:
            # Th√™m v·ªõi s·ªë th·ª© t·ª± (b·∫Øt ƒë·∫ßu t·ª´ 1)
            order = self.images_listbox.size() + 1
            display_name = f"{order}. {filename.split('/')[-1]}"
            self.images_listbox.insert(tk.END, display_name)
            
            # L∆∞u full path v√†o listbox data
            if not hasattr(self.images_listbox, 'image_paths'):
                self.images_listbox.image_paths = []
            self.images_listbox.image_paths.append(filename)
    
    def _remove_image_from_mixed(self):
        """X√≥a ·∫£nh ƒë∆∞·ª£c ch·ªçn kh·ªèi mixed content"""
        selection = self.images_listbox.curselection()
        if not selection:
            messagebox.showwarning(f"{ModernIcons.WARNING} C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ·∫£nh c·∫ßn x√≥a!")
            return
            
        index = selection[0]
        self.images_listbox.delete(index)
        
        # X√≥a kh·ªèi paths list
        if hasattr(self.images_listbox, 'image_paths') and index < len(self.images_listbox.image_paths):
            self.images_listbox.image_paths.pop(index)
        
        # C·∫≠p nh·∫≠t l·∫°i s·ªë th·ª© t·ª±
        self._update_image_numbers()
    
    def _clear_all_images(self):
        """X√≥a t·∫•t c·∫£ ·∫£nh kh·ªèi mixed content"""
        if self.images_listbox.size() == 0:
            return
            
        if messagebox.askyesno(f"{ModernIcons.WARNING} X√°c nh·∫≠n", "X√≥a t·∫•t c·∫£ ·∫£nh?"):
            self.images_listbox.delete(0, tk.END)
            if hasattr(self.images_listbox, 'image_paths'):
                self.images_listbox.image_paths.clear()
    
    def _update_image_numbers(self):
        """C·∫≠p nh·∫≠t l·∫°i s·ªë th·ª© t·ª± cho c√°c ·∫£nh"""
        if not hasattr(self.images_listbox, 'image_paths'):
            return
            
        # L∆∞u l·∫°i c√°c paths
        paths = self.images_listbox.image_paths.copy()
        
        # X√≥a v√† th√™m l·∫°i v·ªõi s·ªë th·ª© t·ª± m·ªõi
        self.images_listbox.delete(0, tk.END)
        
        for i, path in enumerate(paths):
            order = i + 1  # B·∫Øt ƒë·∫ßu t·ª´ 1
            display_name = f"{order}. {path.split('/')[-1]}"
            self.images_listbox.insert(tk.END, display_name)
    
    def _load_shortcuts(self):
        """T·∫£i danh s√°ch shortcuts v√†o treeview v·ªõi icons hi·ªán ƒë·∫°i"""
        # X√≥a c√°c items c≈©
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # L·∫•y danh s√°ch shortcuts
        all_shortcuts = self.config.get_shortcuts()
        
        # L·ªçc shortcuts n·∫øu c√≥ t√¨m ki·∫øm
        search_text = getattr(self, 'search_var', None)
        if search_text and search_text.get().strip():
            filtered_shortcuts = self._filter_shortcuts(all_shortcuts, search_text.get().strip())
        else:
            filtered_shortcuts = all_shortcuts
        
        # L∆∞u danh s√°ch hi·ªán t·∫°i ƒë·ªÉ s·ª≠ d·ª•ng trong _on_select_shortcut
        self.current_shortcuts = filtered_shortcuts
        
        # Th√™m shortcuts v·ªõi icons hi·ªán ƒë·∫°i
        for i, shortcut in enumerate(filtered_shortcuts):
            # Status icon v·ªõi m√†u s·∫Øc
            status_icon = ModernIcons.get_status_icon(shortcut.get('enabled', True))
            status_text = "B·∫≠t" if shortcut.get('enabled', True) else "T·∫Øt"
            
            content = shortcut['content']
            if isinstance(content, dict):
                # Mixed content - hi·ªÉn th·ªã text + s·ªë l∆∞·ª£ng ·∫£nh
                text_part = content.get('text', '')
                images_count = len(content.get('images', []))
                if text_part and len(text_part) > 30:
                    text_part = text_part[:27] + "..."
                content = f"{text_part} + {images_count} ·∫£nh" if images_count > 0 else text_part
            elif isinstance(content, str) and len(content) > 40:
                content = content[:37] + "..."
            
            # Hi·ªÉn th·ªã lo·∫°i shortcut v·ªõi icon hi·ªán ƒë·∫°i
            type_icon = ModernIcons.get_content_type_icon(shortcut['type'])
            if shortcut['type'] == 'mixed':
                display_type = f"{type_icon} VƒÉn b·∫£n + ·∫¢nh"
            elif shortcut['type'] in ['text', 'richtext']:
                display_type = f"{type_icon} VƒÉn b·∫£n"
            else:
                display_type = f"{type_icon} ·∫¢nh"
            
            # Insert v·ªõi styling hi·ªán ƒë·∫°i
            self.tree.insert('', 'end', values=(
                f"{ModernIcons.KEYWORD} {shortcut['keyword']}",
                display_type,
                content,
                f"{status_icon} {status_text}"
            ))
        
        # C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng v·ªõi icon
        count = len(filtered_shortcuts)
        total_count = len(all_shortcuts)
        if search_text and search_text.get().strip():
            self.count_label.config(text=f"{ModernIcons.SHORTCUTS} {count}/{total_count} shortcuts")
        else:
            self.count_label.config(text=f"{ModernIcons.SHORTCUTS} {count} shortcuts")
        
        # Reload shortcuts trong manager
        self.shortcut_manager.reload_shortcuts()
        
        # üî• QUAN TR·ªåNG: C·∫≠p nh·∫≠t cache keywords ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng shortcuts m·ªõi ngay l·∫≠p t·ª©c
        self.keyboard_monitor.refresh_keywords_cache()

    def _filter_shortcuts(self, shortcuts_list, search_text):
        """L·ªçc danh s√°ch shortcuts theo keyword (ch·ªâ t√¨m theo keyword, kh√¥ng t√¨m theo lo·∫°i hay n·ªôi dung)"""
        if not search_text:
            return shortcuts_list
        
        search_text = search_text.lower()
        filtered = []
        
        for shortcut in shortcuts_list:
            # Ch·ªâ t√¨m ki·∫øm theo keyword
            keyword = shortcut.get('keyword', '').lower()
            if search_text in keyword:
                filtered.append(shortcut)
        
        return filtered

    def _on_search_changed(self, *args):
        """X·ª≠ l√Ω khi n·ªôi dung t√¨m ki·∫øm thay ƒë·ªïi"""
        # Reload danh s√°ch v·ªõi t√¨m ki·∫øm
        self._load_shortcuts()

    def _clear_search(self):
        """X√≥a n·ªôi dung t√¨m ki·∫øm"""
        if hasattr(self, 'search_var'):
            self.search_var.set("")
            self.search_entry.focus_set()
    
    def _on_select_shortcut(self, event):
        """X·ª≠ l√Ω khi ch·ªçn shortcut trong danh s√°ch"""
        selection = self.tree.selection()
        if selection:
            # L·∫•y index trong danh s√°ch hi·ªán t·∫°i (ƒë√£ l·ªçc)
            selected_index_in_filtered = self.tree.index(selection[0])
            
            # L·∫•y shortcut t·ª´ danh s√°ch hi·ªán t·∫°i
            if hasattr(self, 'current_shortcuts') and selected_index_in_filtered < len(self.current_shortcuts):
                shortcut = self.current_shortcuts[selected_index_in_filtered]
                
                # T√¨m index c·ªßa shortcut n√†y trong danh s√°ch g·ªëc
                all_shortcuts = self.config.get_shortcuts()
                for i, original_shortcut in enumerate(all_shortcuts):
                    if original_shortcut['keyword'] == shortcut['keyword']:
                        self.selected_index = i
                        break
                else:
                    self.selected_index = None
                    return
            else:
                return
            
            # Load v√†o form v·ªõi animation
            self.keyword_entry.delete(0, tk.END)
            self.keyword_entry.insert(0, shortcut['keyword'])
            
            # G·ªôp text v√† richtext th√†nh text
            shortcut_type = shortcut['type']
            if shortcut_type in ['text', 'richtext']:
                self.type_var.set("text")
                self.content_text.delete(1.0, tk.END)
                self.content_text.insert(1.0, shortcut['content'])
            elif shortcut_type == 'mixed':
                self.type_var.set("mixed")
                # Load mixed content
                content = shortcut['content']
                if isinstance(content, dict):
                    # Load text part
                    self.content_text.delete(1.0, tk.END)
                    self.content_text.insert(1.0, content.get('text', ''))
                    
                    # Load text v√†o mixed_text
                    self.mixed_text.delete(1.0, tk.END)
                    self.mixed_text.insert(1.0, content.get('text', ''))
                    
                    # Load images
                    self.images_listbox.delete(0, tk.END)
                    if hasattr(self.images_listbox, 'image_paths'):
                        self.images_listbox.image_paths.clear()
                    else:
                        self.images_listbox.image_paths = []
                    
                    images = content.get('images', [])
                    for i, image_path in enumerate(images):
                        order = i + 1  # B·∫Øt ƒë·∫ßu t·ª´ 1
                        display_name = f"{order}. {image_path.split('/')[-1]}"
                        self.images_listbox.insert(tk.END, display_name)
                        self.images_listbox.image_paths.append(image_path)
                else:
                    # Legacy format - treat as text
                    self.content_text.delete(1.0, tk.END)
                    self.content_text.insert(1.0, content)
            else:
                self.type_var.set(shortcut_type)
                self.content_text.delete(1.0, tk.END)
                self.content_text.insert(1.0, shortcut['content'])
            
            self.enabled_var.set(shortcut.get('enabled', True))
            
            # Trigger type change ƒë·ªÉ hi·ªÉn th·ªã UI ph√π h·ª£p
            self._on_type_changed()
            
            # Visual feedback
            self.keyword_entry.config(style='Modern.TEntry')
    
    def _clear_form(self):
        """X√≥a form nh·∫≠p li·ªáu v·ªõi animation"""
        self.keyword_entry.delete(0, tk.END)
        self.type_var.set("text")
        self.content_text.delete(1.0, tk.END)
        
        # Clear mixed content
        self.mixed_text.delete(1.0, tk.END)
        self.images_listbox.delete(0, tk.END)
        if hasattr(self.images_listbox, 'image_paths'):
            self.images_listbox.image_paths.clear()
        
        self.enabled_var.set(True)
        self.selected_index = None
        self.tree.selection_remove(self.tree.selection())
        
        # Trigger type change ƒë·ªÉ hi·ªÉn th·ªã UI ph√π h·ª£p
        self._on_type_changed()
        
        # Focus v√†o keyword entry
        self.keyword_entry.focus_set()
    
    def _add_shortcut(self):
        """Th√™m shortcut m·ªõi v·ªõi validation c·∫£i ti·∫øn"""
        keyword = self.keyword_entry.get().strip()
        shortcut_type = self.type_var.get()
        
        if not keyword:
            messagebox.showerror("‚ùå L·ªói", "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a")
            return
        
        # Get content based on type
        if shortcut_type == "mixed":
            # Mixed content: text + images
            text_content = self.mixed_text.get(1.0, tk.END).strip()
            
            # Get images paths
            images = []
            if hasattr(self.images_listbox, 'image_paths'):
                images = self.images_listbox.image_paths.copy()
            
            # Validate: ph·∫£i c√≥ √≠t nh·∫•t text ho·∫∑c images
            if not text_content and not images:
                messagebox.showerror("‚ùå L·ªói", "Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ho·∫∑c ch·ªçn √≠t nh·∫•t 1 ·∫£nh")
                return
            
            # Validate s·ªë l∆∞·ª£ng ·∫£nh
            if len(images) > 20:
                messagebox.showerror("‚ùå L·ªói", "T·ªëi ƒëa 20 ·∫£nh!")
                return
            
            # T·∫°o mixed content structure
            content = {
                'text': text_content,
                'images': images
            }
        else:
            # Regular content
            content = self.content_text.get(1.0, tk.END).strip()
            if not content:
                messagebox.showerror("‚ùå L·ªói", "Vui l√≤ng nh·∫≠p n·ªôi dung")
                return
        
        # Validation cho content size (ch·ªâ v·ªõi regular content)
        if shortcut_type != "mixed" and isinstance(content, str):
            if len(content) > 100000:  # 100KB
                if not messagebox.askyesno("‚ö†Ô∏è C·∫£nh b√°o", 
                    f"N·ªôi dung r·∫•t d√†i ({len(content):,} k√Ω t·ª±).\n"
                    "ƒêi·ªÅu n√†y c√≥ th·ªÉ g√¢y ch·∫≠m khi s·ª≠ d·ª•ng.\n\n"
                    "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?"):
                    return
            elif len(content) > 10000:  # 10KB
                messagebox.showwarning("üí° Th√¥ng b√°o", 
                    f"N·ªôi dung kh√° d√†i ({len(content):,} k√Ω t·ª±).\n"
                    "C√≥ th·ªÉ m·∫•t m·ªôt ch√∫t th·ªùi gian khi trigger.")
        
        success = self.config.add_shortcut(
            keyword,
            content,
            shortcut_type,
            self.enabled_var.get()
        )
        
        if success:
            self._load_shortcuts()
            self._clear_form()
            
            if shortcut_type == "mixed":
                print(f"üéâ Mixed shortcut '{keyword}' ƒë√£ ƒë∆∞·ª£c th√™m v·ªõi {len(content['images'])} ·∫£nh!")
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng", 
                    f"ƒê√£ th√™m shortcut '{keyword}' th√†nh c√¥ng!\n\n"
                    f"üìù VƒÉn b·∫£n + {len(content['images'])} ·∫£nh\n"
                    f"üí° C√≥ th·ªÉ s·ª≠ d·ª•ng ngay kh√¥ng c·∫ßn kh·ªüi ƒë·ªông l·∫°i.")
            else:
                print(f"üéâ Shortcut '{keyword}' ƒë√£ ƒë∆∞·ª£c th√™m v√† c√≥ th·ªÉ s·ª≠ d·ª•ng ngay l·∫≠p t·ª©c!")
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ th√™m shortcut '{keyword}' th√†nh c√¥ng!\n\nüí° C√≥ th·ªÉ s·ª≠ d·ª•ng ngay kh√¥ng c·∫ßn kh·ªüi ƒë·ªông l·∫°i.")
        else:
            messagebox.showerror("‚ùå L·ªói", f"T·ª´ kh√≥a '{keyword}' ƒë√£ t·ªìn t·∫°i!")
            self.keyword_entry.focus_set()
    
    def _update_shortcut(self):
        """C·∫≠p nh·∫≠t shortcut ƒë√£ ch·ªçn"""
        if self.selected_index is None:
            messagebox.showerror("‚ùå L·ªói", "Vui l√≤ng ch·ªçn shortcut c·∫ßn c·∫≠p nh·∫≠t")
            return
        
        keyword = self.keyword_entry.get().strip()
        shortcut_type = self.type_var.get()
        
        if not keyword:
            messagebox.showerror("‚ùå L·ªói", "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a")
            return
        
        # Get content based on type
        if shortcut_type == "mixed":
            # Mixed content: text + images
            text_content = self.mixed_text.get(1.0, tk.END).strip()
            
            # Get images paths
            images = []
            if hasattr(self.images_listbox, 'image_paths'):
                images = self.images_listbox.image_paths.copy()
            
            # Validate: ph·∫£i c√≥ √≠t nh·∫•t text ho·∫∑c images
            if not text_content and not images:
                messagebox.showerror("‚ùå L·ªói", "Vui l√≤ng nh·∫≠p vƒÉn b·∫£n ho·∫∑c ch·ªçn √≠t nh·∫•t 1 ·∫£nh")
                return
            
            # Validate s·ªë l∆∞·ª£ng ·∫£nh
            if len(images) > 20:
                messagebox.showerror("‚ùå L·ªói", "T·ªëi ƒëa 20 ·∫£nh!")
                return
            
            # T·∫°o mixed content structure
            content = {
                'text': text_content,
                'images': images
            }
        else:
            # Regular content
            content = self.content_text.get(1.0, tk.END).strip()
            if not content:
                messagebox.showerror("‚ùå L·ªói", "Vui l√≤ng nh·∫≠p n·ªôi dung")
                return
        
        # Validation cho content size (ch·ªâ v·ªõi regular content)
        if shortcut_type != "mixed" and isinstance(content, str):
            if len(content) > 100000:  # 100KB
                if not messagebox.askyesno("‚ö†Ô∏è C·∫£nh b√°o", 
                    f"N·ªôi dung r·∫•t d√†i ({len(content):,} k√Ω t·ª±).\n"
                    "ƒêi·ªÅu n√†y c√≥ th·ªÉ g√¢y ch·∫≠m khi s·ª≠ d·ª•ng.\n\n"
                    "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?"):
                    return
            elif len(content) > 10000:  # 10KB
                messagebox.showwarning("üí° Th√¥ng b√°o", 
                    f"N·ªôi dung kh√° d√†i ({len(content):,} k√Ω t·ª±).\n"
                    "C√≥ th·ªÉ m·∫•t m·ªôt ch√∫t th·ªùi gian khi trigger.")
        
        success = self.config.update_shortcut(
            self.selected_index,
            keyword,
            content,
            shortcut_type,
            self.enabled_var.get()
        )
        
        if success:
            self._load_shortcuts()
            self._clear_form()
            
            if shortcut_type == "mixed":
                print(f"üéâ Mixed shortcut '{keyword}' ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi {len(content['images'])} ·∫£nh!")
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng", 
                    f"ƒê√£ c·∫≠p nh·∫≠t shortcut '{keyword}' th√†nh c√¥ng!\n\n"
                    f"üìù VƒÉn b·∫£n + {len(content['images'])} ·∫£nh\n"
                    f"üí° Thay ƒë·ªïi ƒë∆∞·ª£c √°p d·ª•ng ngay.")
            else:
                print(f"üéâ Shortcut '{keyword}' ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† √°p d·ª•ng ngay l·∫≠p t·ª©c!")
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ c·∫≠p nh·∫≠t shortcut '{keyword}' th√†nh c√¥ng!\n\nüí° Thay ƒë·ªïi ƒë∆∞·ª£c √°p d·ª•ng ngay.")
    
    def _delete_shortcut(self):
        """X√≥a shortcut ƒë√£ ch·ªçn"""
        if self.selected_index is None:
            messagebox.showerror("‚ùå L·ªói", "Vui l√≤ng ch·ªçn shortcut c·∫ßn x√≥a")
            return
        
        shortcut = self.config.get_shortcuts()[self.selected_index]
        keyword = shortcut['keyword']
        
        if messagebox.askyesno("üóëÔ∏è X√°c nh·∫≠n x√≥a", 
                              f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a shortcut '{keyword}'?\n\n"
                              "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c."):
            success = self.config.delete_shortcut(self.selected_index)
            if success:
                self._load_shortcuts()
                self._clear_form()
                print(f"üóëÔ∏è Shortcut '{keyword}' ƒë√£ ƒë∆∞·ª£c x√≥a v√† ng·ª´ng ho·∫°t ƒë·ªông ngay l·∫≠p t·ª©c!")
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng", f"ƒê√£ x√≥a shortcut '{keyword}' th√†nh c√¥ng!\n\nüí° Shortcut ng·ª´ng ho·∫°t ƒë·ªông ngay.")
    
    def _import_config(self):
        """Import c·∫•u h√¨nh t·ª´ file"""
        filename = filedialog.askopenfilename(
            title="üì• Ch·ªçn file c·∫•u h√¨nh ƒë·ªÉ import",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        if filename:
            if self.config.import_config(filename):
                self._load_shortcuts()
                print(f"üì• ƒê√£ import {len(self.config.get_shortcuts())} shortcuts v√† c√≥ th·ªÉ s·ª≠ d·ª•ng ngay!")
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng", 
                                  f"ƒê√£ import c·∫•u h√¨nh th√†nh c√¥ng!\n\n"
                                  f"S·ªë shortcuts ƒë√£ import: {len(self.config.get_shortcuts())}\n"
                                  f"üí° T·∫•t c·∫£ shortcuts c√≥ th·ªÉ s·ª≠ d·ª•ng ngay.")
            else:
                messagebox.showerror("‚ùå L·ªói", 
                                   "Kh√¥ng th·ªÉ import c·∫•u h√¨nh!\n\n"
                                   "Vui l√≤ng ki·ªÉm tra:\n"
                                   "‚Ä¢ File c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON\n"
                                   "‚Ä¢ File kh√¥ng b·ªã l·ªói ho·∫∑c corrupt")
    
    def _export_config(self):
        """Export c·∫•u h√¨nh ra file"""
        filename = filedialog.asksaveasfilename(
            title="üì§ L∆∞u file c·∫•u h√¨nh",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        if filename:
            if self.config.export_config(filename):
                messagebox.showinfo("‚úÖ Th√†nh c√¥ng", 
                                  f"ƒê√£ export c·∫•u h√¨nh th√†nh c√¥ng!\n\n"
                                  f"File: {filename}\n"
                                  f"S·ªë shortcuts: {len(self.config.get_shortcuts())}")
            else:
                messagebox.showerror("‚ùå L·ªói", 
                                   "Kh√¥ng th·ªÉ export c·∫•u h√¨nh!\n\n"
                                   "Vui l√≤ng ki·ªÉm tra quy·ªÅn ghi file.")
    
    def _on_monitoring_status_changed(self, is_active: bool):
        """Callback khi tr·∫°ng th√°i monitoring thay ƒë·ªïi v·ªõi icons hi·ªán ƒë·∫°i"""
        if is_active:
            self.status_label.config(text=f"{ModernIcons.HOTKEY} ƒêang theo d√µi b√†n ph√≠m")
            self.status_indicator.config(fg=ModernColors.SUCCESS, text=ModernIcons.ACTIVE)
        else:
            self.status_label.config(text=f"{ModernIcons.PAUSE} ƒê√£ d·ª´ng theo d√µi")
            self.status_indicator.config(fg=ModernColors.DANGER, text=ModernIcons.INACTIVE)
    
    def _on_shortcut_triggered(self, keyword: str, type: str, content: str):
        """Callback khi shortcut ƒë∆∞·ª£c trigger v·ªõi notification"""
        print(f"üî• Triggered: {keyword} ({type})")
        # C√≥ th·ªÉ th√™m toast notification ·ªü ƒë√¢y
    
    def _toggle_autostart(self):
        """B·∫≠t/t·∫Øt kh·ªüi ƒë·ªông c√πng Windows"""
        success = toggle_autostart()
        if success:
            current = is_autostart_enabled()
            self.autostart_var.set(current)
            status = "b·∫≠t" if current else "t·∫Øt"
            messagebox.showinfo("‚úÖ Th√†nh c√¥ng", 
                              f"ƒê√£ {status} kh·ªüi ƒë·ªông c√πng Windows!\n\n"
                              f"·ª®ng d·ª•ng {'s·∫Ω' if current else 's·∫Ω kh√¥ng'} t·ª± ƒë·ªông kh·ªüi ƒë·ªông khi b·∫≠t m√°y.")
        else:
            self.autostart_var.set(is_autostart_enabled())
            messagebox.showerror("‚ùå L·ªói", 
                                "Kh√¥ng th·ªÉ thay ƒë·ªïi c√†i ƒë·∫∑t kh·ªüi ƒë·ªông!\n\n"
                                "Vui l√≤ng ch·∫°y ·ª©ng d·ª•ng v·ªõi quy·ªÅn Administrator.")
    
    def _on_window_state_change(self, event):
        """X·ª≠ l√Ω thay ƒë·ªïi tr·∫°ng th√°i c·ª≠a s·ªï (ƒë√£ disable ƒë·ªÉ tr√°nh loop)"""
        # Method n√†y ƒë√£ ƒë∆∞·ª£c disable ƒë·ªÉ tr√°nh infinite loop
        pass
    
    def _on_closing(self):
        """X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï - ch·ªâ cho ph√©p tho√°t ho√†n to√†n ho·∫∑c ·∫©n"""
        if self.minimize_to_tray_var.get() and self.on_minimize_to_tray:
            # Thu nh·ªè xu·ªëng tray (·∫©n c·ª≠a s·ªï, kh√¥ng minimize)
            self.hide()
            self.on_minimize_to_tray()
            print("üì§ ·∫®n xu·ªëng system tray")
        else:
            # Tho√°t ·ª©ng d·ª•ng
            result = messagebox.askyesno("üö™ Tho√°t ·ª©ng d·ª•ng", 
                                       "B·∫°n c√≥ ch·∫Øc mu·ªën tho√°t ·ª©ng d·ª•ng?\n\n"
                                       "·ª®ng d·ª•ng s·∫Ω ng·ª´ng theo d√µi b√†n ph√≠m.")
            if result:
                self.stop()
                self.root.destroy()
                print("üö™ Tho√°t ·ª©ng d·ª•ng ho√†n to√†n")
    
    def set_on_minimize_to_tray(self, callback):
        """ƒê·∫∑t callback khi minimize to tray"""
        self.on_minimize_to_tray = callback
    
    def show(self):
        """Hi·ªÉn th·ªã c·ª≠a s·ªï ·ªü k√≠ch th∆∞·ªõc 1440x1080"""
        self.root.deiconify()
        self.root.lift()
        self.root.focus_force()
        print("üì∫ Hi·ªÉn th·ªã c·ª≠a s·ªï ·ªü k√≠ch th∆∞·ªõc 1440x1080")
    
    def hide(self):
        """·∫®n c·ª≠a s·ªï"""
        self.root.withdraw()
        print("üëÅÔ∏è ·∫®n c·ª≠a s·ªï")
    
    def start(self):
        """Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng"""
        self.keyboard_monitor.start_monitoring()
        self._update_performance_info()
        
        print("üöÄ Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng ·ªü k√≠ch th∆∞·ªõc 1440x1080")
        self.root.mainloop()
    
    def stop(self):
        """D·ª´ng ·ª©ng d·ª•ng"""
        self.keyboard_monitor.stop_monitoring()
    
    def _set_preset(self, preset_type: str):
        """ƒê·∫∑t preset hi·ªáu su·∫•t v·ªõi icons hi·ªán ƒë·∫°i"""
        presets = {
            "ultra": {"instant": True, "delay": 0.01},
            "fast": {"instant": False, "delay": 0.05},
            "balanced": {"instant": False, "delay": 0.1},
            "safe": {"instant": False, "delay": 0.3}
        }
        
        if preset_type in presets:
            preset = presets[preset_type]
            self.instant_trigger_var.set(preset["instant"])
            self.delay_var.set(preset["delay"])
            self._on_instant_trigger_changed()
            self._on_delay_changed()
            self._update_performance_info()
            
            preset_names = {
                "ultra": f"{ModernIcons.ULTRA_FAST} Si√™u nhanh",
                "fast": f"{ModernIcons.FAST} Nhanh", 
                "balanced": f"{ModernIcons.BALANCED} C√¢n b·∫±ng",
                "safe": f"{ModernIcons.SAFE} An to√†n"
            }
            messagebox.showinfo(f"{ModernIcons.SUCCESS} Th√†nh c√¥ng", 
                              f"ƒê√£ √°p d·ª•ng preset: {preset_names[preset_type]}")
    
    def _emergency_exit(self, event=None):
        """Tho√°t kh·∫©n c·∫•p b·∫±ng Ctrl+Alt+Q"""
        result = messagebox.askyesno("üÜò Tho√°t kh·∫©n c·∫•p", 
                                   "Tho√°t ·ª©ng d·ª•ng ngay l·∫≠p t·ª©c?\n\n"
                                   "Ph√≠m t·∫Øt: Ctrl+Alt+Q")
        if result:
            print("üÜò Tho√°t kh·∫©n c·∫•p ƒë∆∞·ª£c k√≠ch ho·∫°t!")
            self.stop()
            self.root.quit()
            self.root.destroy() 